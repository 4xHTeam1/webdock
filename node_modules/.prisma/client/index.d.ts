
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model FeatureRequest
 * 
 */
export type FeatureRequest = $Result.DefaultSelection<Prisma.$FeatureRequestPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model CommentReply
 * 
 */
export type CommentReply = $Result.DefaultSelection<Prisma.$CommentReplyPayload>
/**
 * Model FeatureUpvote
 * 
 */
export type FeatureUpvote = $Result.DefaultSelection<Prisma.$FeatureUpvotePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model FeatureRequestMerge
 * 
 */
export type FeatureRequestMerge = $Result.DefaultSelection<Prisma.$FeatureRequestMergePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  /**
   * Gives access to the client metrics in json or prometheus format.
   * 
   * @example
   * ```
   * const metrics = await prisma.$metrics.json()
   * // or
   * const metrics = await prisma.$metrics.prometheus()
   * ```
   */
  readonly $metrics: runtime.MetricsClient
  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs>;

  /**
   * `prisma.featureRequest`: Exposes CRUD operations for the **FeatureRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeatureRequests
    * const featureRequests = await prisma.featureRequest.findMany()
    * ```
    */
  get featureRequest(): Prisma.FeatureRequestDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.commentReply`: Exposes CRUD operations for the **CommentReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentReplies
    * const commentReplies = await prisma.commentReply.findMany()
    * ```
    */
  get commentReply(): Prisma.CommentReplyDelegate<ExtArgs>;

  /**
   * `prisma.featureUpvote`: Exposes CRUD operations for the **FeatureUpvote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeatureUpvotes
    * const featureUpvotes = await prisma.featureUpvote.findMany()
    * ```
    */
  get featureUpvote(): Prisma.FeatureUpvoteDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.featureRequestMerge`: Exposes CRUD operations for the **FeatureRequestMerge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeatureRequestMerges
    * const featureRequestMerges = await prisma.featureRequestMerge.findMany()
    * ```
    */
  get featureRequestMerge(): Prisma.FeatureRequestMergeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.0
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Status: 'Status',
    FeatureRequest: 'FeatureRequest',
    Comment: 'Comment',
    CommentReply: 'CommentReply',
    FeatureUpvote: 'FeatureUpvote',
    Notification: 'Notification',
    FeatureRequestMerge: 'FeatureRequestMerge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'category' | 'status' | 'featureRequest' | 'comment' | 'commentReply' | 'featureUpvote' | 'notification' | 'featureRequestMerge'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      FeatureRequest: {
        payload: Prisma.$FeatureRequestPayload<ExtArgs>
        fields: Prisma.FeatureRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>
          }
          findFirst: {
            args: Prisma.FeatureRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>
          }
          findMany: {
            args: Prisma.FeatureRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>[]
          }
          create: {
            args: Prisma.FeatureRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>
          }
          createMany: {
            args: Prisma.FeatureRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeatureRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>
          }
          update: {
            args: Prisma.FeatureRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>
          }
          deleteMany: {
            args: Prisma.FeatureRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeatureRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestPayload>
          }
          aggregate: {
            args: Prisma.FeatureRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeatureRequest>
          }
          groupBy: {
            args: Prisma.FeatureRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeatureRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<FeatureRequestCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      CommentReply: {
        payload: Prisma.$CommentReplyPayload<ExtArgs>
        fields: Prisma.CommentReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentReplyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentReplyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>
          }
          findFirst: {
            args: Prisma.CommentReplyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentReplyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>
          }
          findMany: {
            args: Prisma.CommentReplyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>[]
          }
          create: {
            args: Prisma.CommentReplyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>
          }
          createMany: {
            args: Prisma.CommentReplyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentReplyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>
          }
          update: {
            args: Prisma.CommentReplyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>
          }
          deleteMany: {
            args: Prisma.CommentReplyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentReplyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentReplyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentReplyPayload>
          }
          aggregate: {
            args: Prisma.CommentReplyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommentReply>
          }
          groupBy: {
            args: Prisma.CommentReplyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentReplyCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentReplyCountAggregateOutputType> | number
          }
        }
      }
      FeatureUpvote: {
        payload: Prisma.$FeatureUpvotePayload<ExtArgs>
        fields: Prisma.FeatureUpvoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureUpvoteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureUpvoteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>
          }
          findFirst: {
            args: Prisma.FeatureUpvoteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureUpvoteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>
          }
          findMany: {
            args: Prisma.FeatureUpvoteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>[]
          }
          create: {
            args: Prisma.FeatureUpvoteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>
          }
          createMany: {
            args: Prisma.FeatureUpvoteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeatureUpvoteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>
          }
          update: {
            args: Prisma.FeatureUpvoteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>
          }
          deleteMany: {
            args: Prisma.FeatureUpvoteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureUpvoteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeatureUpvoteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureUpvotePayload>
          }
          aggregate: {
            args: Prisma.FeatureUpvoteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeatureUpvote>
          }
          groupBy: {
            args: Prisma.FeatureUpvoteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeatureUpvoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureUpvoteCountArgs<ExtArgs>,
            result: $Utils.Optional<FeatureUpvoteCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      FeatureRequestMerge: {
        payload: Prisma.$FeatureRequestMergePayload<ExtArgs>
        fields: Prisma.FeatureRequestMergeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureRequestMergeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureRequestMergeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>
          }
          findFirst: {
            args: Prisma.FeatureRequestMergeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureRequestMergeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>
          }
          findMany: {
            args: Prisma.FeatureRequestMergeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>[]
          }
          create: {
            args: Prisma.FeatureRequestMergeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>
          }
          createMany: {
            args: Prisma.FeatureRequestMergeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeatureRequestMergeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>
          }
          update: {
            args: Prisma.FeatureRequestMergeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>
          }
          deleteMany: {
            args: Prisma.FeatureRequestMergeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureRequestMergeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeatureRequestMergeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeatureRequestMergePayload>
          }
          aggregate: {
            args: Prisma.FeatureRequestMergeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeatureRequestMerge>
          }
          groupBy: {
            args: Prisma.FeatureRequestMergeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeatureRequestMergeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureRequestMergeCountArgs<ExtArgs>,
            result: $Utils.Optional<FeatureRequestMergeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    featureRequests: number
    comments: number
    commentReplys: number
    featureUpvotes: number
    ownerNotifications: number
    userNotifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureRequests?: boolean | UserCountOutputTypeCountFeatureRequestsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    commentReplys?: boolean | UserCountOutputTypeCountCommentReplysArgs
    featureUpvotes?: boolean | UserCountOutputTypeCountFeatureUpvotesArgs
    ownerNotifications?: boolean | UserCountOutputTypeCountOwnerNotificationsArgs
    userNotifications?: boolean | UserCountOutputTypeCountUserNotificationsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeatureRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentReplysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentReplyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeatureUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureUpvoteWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnerNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    featureRequests: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureRequests?: boolean | CategoryCountOutputTypeCountFeatureRequestsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountFeatureRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestWhereInput
  }



  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    featureRequests: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureRequests?: boolean | StatusCountOutputTypeCountFeatureRequestsArgs
  }

  // Custom InputTypes

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountFeatureRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestWhereInput
  }



  /**
   * Count Type FeatureRequestCountOutputType
   */

  export type FeatureRequestCountOutputType = {
    comments: number
    featureUpvotes: number
    Notification: number
    FeatureRequestMergeFrom: number
    FeatureRequestMergeInto: number
  }

  export type FeatureRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | FeatureRequestCountOutputTypeCountCommentsArgs
    featureUpvotes?: boolean | FeatureRequestCountOutputTypeCountFeatureUpvotesArgs
    Notification?: boolean | FeatureRequestCountOutputTypeCountNotificationArgs
    FeatureRequestMergeFrom?: boolean | FeatureRequestCountOutputTypeCountFeatureRequestMergeFromArgs
    FeatureRequestMergeInto?: boolean | FeatureRequestCountOutputTypeCountFeatureRequestMergeIntoArgs
  }

  // Custom InputTypes

  /**
   * FeatureRequestCountOutputType without action
   */
  export type FeatureRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestCountOutputType
     */
    select?: FeatureRequestCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FeatureRequestCountOutputType without action
   */
  export type FeatureRequestCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * FeatureRequestCountOutputType without action
   */
  export type FeatureRequestCountOutputTypeCountFeatureUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureUpvoteWhereInput
  }


  /**
   * FeatureRequestCountOutputType without action
   */
  export type FeatureRequestCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * FeatureRequestCountOutputType without action
   */
  export type FeatureRequestCountOutputTypeCountFeatureRequestMergeFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestMergeWhereInput
  }


  /**
   * FeatureRequestCountOutputType without action
   */
  export type FeatureRequestCountOutputTypeCountFeatureRequestMergeIntoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestMergeWhereInput
  }



  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    commentReplys: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commentReplys?: boolean | CommentCountOutputTypeCountCommentReplysArgs
  }

  // Custom InputTypes

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountCommentReplysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentReplyWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    avatarURL: string | null
    email: string | null
    name: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    avatarURL: string | null
    email: string | null
    name: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    avatarURL: number
    email: number
    name: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    avatarURL?: true
    email?: true
    name?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    avatarURL?: true
    email?: true
    name?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    avatarURL?: true
    email?: true
    name?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    avatarURL: string | null
    email: string
    name: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    avatarURL?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    featureRequests?: boolean | User$featureRequestsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    commentReplys?: boolean | User$commentReplysArgs<ExtArgs>
    featureUpvotes?: boolean | User$featureUpvotesArgs<ExtArgs>
    ownerNotifications?: boolean | User$ownerNotificationsArgs<ExtArgs>
    userNotifications?: boolean | User$userNotificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    avatarURL?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureRequests?: boolean | User$featureRequestsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    commentReplys?: boolean | User$commentReplysArgs<ExtArgs>
    featureUpvotes?: boolean | User$featureUpvotesArgs<ExtArgs>
    ownerNotifications?: boolean | User$ownerNotificationsArgs<ExtArgs>
    userNotifications?: boolean | User$userNotificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      featureRequests: Prisma.$FeatureRequestPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      commentReplys: Prisma.$CommentReplyPayload<ExtArgs>[]
      featureUpvotes: Prisma.$FeatureUpvotePayload<ExtArgs>[]
      ownerNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      userNotifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      avatarURL: string | null
      email: string
      name: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    featureRequests<T extends User$featureRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$featureRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findMany'> | Null>;

    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    commentReplys<T extends User$commentReplysArgs<ExtArgs> = {}>(args?: Subset<T, User$commentReplysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    featureUpvotes<T extends User$featureUpvotesArgs<ExtArgs> = {}>(args?: Subset<T, User$featureUpvotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findMany'> | Null>;

    ownerNotifications<T extends User$ownerNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownerNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    userNotifications<T extends User$userNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$userNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly avatarURL: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.featureRequests
   */
  export type User$featureRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    where?: FeatureRequestWhereInput
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    cursor?: FeatureRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureRequestScalarFieldEnum | FeatureRequestScalarFieldEnum[]
  }


  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * User.commentReplys
   */
  export type User$commentReplysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    where?: CommentReplyWhereInput
    orderBy?: CommentReplyOrderByWithRelationInput | CommentReplyOrderByWithRelationInput[]
    cursor?: CommentReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentReplyScalarFieldEnum | CommentReplyScalarFieldEnum[]
  }


  /**
   * User.featureUpvotes
   */
  export type User$featureUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    where?: FeatureUpvoteWhereInput
    orderBy?: FeatureUpvoteOrderByWithRelationInput | FeatureUpvoteOrderByWithRelationInput[]
    cursor?: FeatureUpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureUpvoteScalarFieldEnum | FeatureUpvoteScalarFieldEnum[]
  }


  /**
   * User.ownerNotifications
   */
  export type User$ownerNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User.userNotifications
   */
  export type User$userNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    featureRequests?: boolean | Category$featureRequestsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureRequests?: boolean | Category$featureRequestsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      featureRequests: Prisma.$FeatureRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    featureRequests<T extends Category$featureRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Category$featureRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.featureRequests
   */
  export type Category$featureRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    where?: FeatureRequestWhereInput
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    cursor?: FeatureRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureRequestScalarFieldEnum | FeatureRequestScalarFieldEnum[]
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
  }



  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    name: number
    color: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    name: string
    color: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    featureRequests?: boolean | Status$featureRequestsArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
  }

  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureRequests?: boolean | Status$featureRequestsArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      featureRequests: Prisma.$FeatureRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      color: string
    }, ExtArgs["result"]["status"]>
    composites: {}
  }


  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusCreateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    featureRequests<T extends Status$featureRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Status$featureRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Status model
   */ 
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'Int'>
    readonly name: FieldRef<"Status", 'String'>
    readonly color: FieldRef<"Status", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
  }


  /**
   * Status.featureRequests
   */
  export type Status$featureRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    where?: FeatureRequestWhereInput
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    cursor?: FeatureRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureRequestScalarFieldEnum | FeatureRequestScalarFieldEnum[]
  }


  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
  }



  /**
   * Model FeatureRequest
   */

  export type AggregateFeatureRequest = {
    _count: FeatureRequestCountAggregateOutputType | null
    _avg: FeatureRequestAvgAggregateOutputType | null
    _sum: FeatureRequestSumAggregateOutputType | null
    _min: FeatureRequestMinAggregateOutputType | null
    _max: FeatureRequestMaxAggregateOutputType | null
  }

  export type FeatureRequestAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    categoryId: number | null
    statusId: number | null
  }

  export type FeatureRequestSumAggregateOutputType = {
    id: number | null
    userId: number | null
    categoryId: number | null
    statusId: number | null
  }

  export type FeatureRequestMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    dateSubmitted: Date | null
    userId: number | null
    categoryId: number | null
    statusId: number | null
  }

  export type FeatureRequestMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    dateSubmitted: Date | null
    userId: number | null
    categoryId: number | null
    statusId: number | null
  }

  export type FeatureRequestCountAggregateOutputType = {
    id: number
    title: number
    description: number
    dateSubmitted: number
    userId: number
    categoryId: number
    statusId: number
    _all: number
  }


  export type FeatureRequestAvgAggregateInputType = {
    id?: true
    userId?: true
    categoryId?: true
    statusId?: true
  }

  export type FeatureRequestSumAggregateInputType = {
    id?: true
    userId?: true
    categoryId?: true
    statusId?: true
  }

  export type FeatureRequestMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dateSubmitted?: true
    userId?: true
    categoryId?: true
    statusId?: true
  }

  export type FeatureRequestMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dateSubmitted?: true
    userId?: true
    categoryId?: true
    statusId?: true
  }

  export type FeatureRequestCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dateSubmitted?: true
    userId?: true
    categoryId?: true
    statusId?: true
    _all?: true
  }

  export type FeatureRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureRequest to aggregate.
     */
    where?: FeatureRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequests to fetch.
     */
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeatureRequests
    **/
    _count?: true | FeatureRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeatureRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeatureRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureRequestMaxAggregateInputType
  }

  export type GetFeatureRequestAggregateType<T extends FeatureRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatureRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatureRequest[P]>
      : GetScalarType<T[P], AggregateFeatureRequest[P]>
  }




  export type FeatureRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestWhereInput
    orderBy?: FeatureRequestOrderByWithAggregationInput | FeatureRequestOrderByWithAggregationInput[]
    by: FeatureRequestScalarFieldEnum[] | FeatureRequestScalarFieldEnum
    having?: FeatureRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureRequestCountAggregateInputType | true
    _avg?: FeatureRequestAvgAggregateInputType
    _sum?: FeatureRequestSumAggregateInputType
    _min?: FeatureRequestMinAggregateInputType
    _max?: FeatureRequestMaxAggregateInputType
  }

  export type FeatureRequestGroupByOutputType = {
    id: number
    title: string
    description: string
    dateSubmitted: Date
    userId: number
    categoryId: number
    statusId: number
    _count: FeatureRequestCountAggregateOutputType | null
    _avg: FeatureRequestAvgAggregateOutputType | null
    _sum: FeatureRequestSumAggregateOutputType | null
    _min: FeatureRequestMinAggregateOutputType | null
    _max: FeatureRequestMaxAggregateOutputType | null
  }

  type GetFeatureRequestGroupByPayload<T extends FeatureRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureRequestGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureRequestGroupByOutputType[P]>
        }
      >
    >


  export type FeatureRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dateSubmitted?: boolean
    userId?: boolean
    categoryId?: boolean
    statusId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    status?: boolean | StatusDefaultArgs<ExtArgs>
    comments?: boolean | FeatureRequest$commentsArgs<ExtArgs>
    featureUpvotes?: boolean | FeatureRequest$featureUpvotesArgs<ExtArgs>
    Notification?: boolean | FeatureRequest$NotificationArgs<ExtArgs>
    FeatureRequestMergeFrom?: boolean | FeatureRequest$FeatureRequestMergeFromArgs<ExtArgs>
    FeatureRequestMergeInto?: boolean | FeatureRequest$FeatureRequestMergeIntoArgs<ExtArgs>
    _count?: boolean | FeatureRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureRequest"]>

  export type FeatureRequestSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    dateSubmitted?: boolean
    userId?: boolean
    categoryId?: boolean
    statusId?: boolean
  }

  export type FeatureRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    status?: boolean | StatusDefaultArgs<ExtArgs>
    comments?: boolean | FeatureRequest$commentsArgs<ExtArgs>
    featureUpvotes?: boolean | FeatureRequest$featureUpvotesArgs<ExtArgs>
    Notification?: boolean | FeatureRequest$NotificationArgs<ExtArgs>
    FeatureRequestMergeFrom?: boolean | FeatureRequest$FeatureRequestMergeFromArgs<ExtArgs>
    FeatureRequestMergeInto?: boolean | FeatureRequest$FeatureRequestMergeIntoArgs<ExtArgs>
    _count?: boolean | FeatureRequestCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FeatureRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeatureRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      status: Prisma.$StatusPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      featureUpvotes: Prisma.$FeatureUpvotePayload<ExtArgs>[]
      Notification: Prisma.$NotificationPayload<ExtArgs>[]
      FeatureRequestMergeFrom: Prisma.$FeatureRequestMergePayload<ExtArgs>[]
      FeatureRequestMergeInto: Prisma.$FeatureRequestMergePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      dateSubmitted: Date
      userId: number
      categoryId: number
      statusId: number
    }, ExtArgs["result"]["featureRequest"]>
    composites: {}
  }


  type FeatureRequestGetPayload<S extends boolean | null | undefined | FeatureRequestDefaultArgs> = $Result.GetResult<Prisma.$FeatureRequestPayload, S>

  type FeatureRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeatureRequestFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FeatureRequestCountAggregateInputType | true
    }

  export interface FeatureRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeatureRequest'], meta: { name: 'FeatureRequest' } }
    /**
     * Find zero or one FeatureRequest that matches the filter.
     * @param {FeatureRequestFindUniqueArgs} args - Arguments to find a FeatureRequest
     * @example
     * // Get one FeatureRequest
     * const featureRequest = await prisma.featureRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeatureRequestFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestFindUniqueArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeatureRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeatureRequestFindUniqueOrThrowArgs} args - Arguments to find a FeatureRequest
     * @example
     * // Get one FeatureRequest
     * const featureRequest = await prisma.featureRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeatureRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeatureRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestFindFirstArgs} args - Arguments to find a FeatureRequest
     * @example
     * // Get one FeatureRequest
     * const featureRequest = await prisma.featureRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeatureRequestFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestFindFirstArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeatureRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestFindFirstOrThrowArgs} args - Arguments to find a FeatureRequest
     * @example
     * // Get one FeatureRequest
     * const featureRequest = await prisma.featureRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeatureRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeatureRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeatureRequests
     * const featureRequests = await prisma.featureRequest.findMany()
     * 
     * // Get first 10 FeatureRequests
     * const featureRequests = await prisma.featureRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureRequestWithIdOnly = await prisma.featureRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeatureRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeatureRequest.
     * @param {FeatureRequestCreateArgs} args - Arguments to create a FeatureRequest.
     * @example
     * // Create one FeatureRequest
     * const FeatureRequest = await prisma.featureRequest.create({
     *   data: {
     *     // ... data to create a FeatureRequest
     *   }
     * })
     * 
    **/
    create<T extends FeatureRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestCreateArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeatureRequests.
     *     @param {FeatureRequestCreateManyArgs} args - Arguments to create many FeatureRequests.
     *     @example
     *     // Create many FeatureRequests
     *     const featureRequest = await prisma.featureRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeatureRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeatureRequest.
     * @param {FeatureRequestDeleteArgs} args - Arguments to delete one FeatureRequest.
     * @example
     * // Delete one FeatureRequest
     * const FeatureRequest = await prisma.featureRequest.delete({
     *   where: {
     *     // ... filter to delete one FeatureRequest
     *   }
     * })
     * 
    **/
    delete<T extends FeatureRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestDeleteArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeatureRequest.
     * @param {FeatureRequestUpdateArgs} args - Arguments to update one FeatureRequest.
     * @example
     * // Update one FeatureRequest
     * const featureRequest = await prisma.featureRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeatureRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestUpdateArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeatureRequests.
     * @param {FeatureRequestDeleteManyArgs} args - Arguments to filter FeatureRequests to delete.
     * @example
     * // Delete a few FeatureRequests
     * const { count } = await prisma.featureRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeatureRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeatureRequests
     * const featureRequest = await prisma.featureRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeatureRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeatureRequest.
     * @param {FeatureRequestUpsertArgs} args - Arguments to update or create a FeatureRequest.
     * @example
     * // Update or create a FeatureRequest
     * const featureRequest = await prisma.featureRequest.upsert({
     *   create: {
     *     // ... data to create a FeatureRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeatureRequest we want to update
     *   }
     * })
    **/
    upsert<T extends FeatureRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestUpsertArgs<ExtArgs>>
    ): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeatureRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestCountArgs} args - Arguments to filter FeatureRequests to count.
     * @example
     * // Count the number of FeatureRequests
     * const count = await prisma.featureRequest.count({
     *   where: {
     *     // ... the filter for the FeatureRequests we want to count
     *   }
     * })
    **/
    count<T extends FeatureRequestCountArgs>(
      args?: Subset<T, FeatureRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeatureRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureRequestAggregateArgs>(args: Subset<T, FeatureRequestAggregateArgs>): Prisma.PrismaPromise<GetFeatureRequestAggregateType<T>>

    /**
     * Group by FeatureRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureRequestGroupByArgs['orderBy'] }
        : { orderBy?: FeatureRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeatureRequest model
   */
  readonly fields: FeatureRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeatureRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    comments<T extends FeatureRequest$commentsArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequest$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    featureUpvotes<T extends FeatureRequest$featureUpvotesArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequest$featureUpvotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findMany'> | Null>;

    Notification<T extends FeatureRequest$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequest$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    FeatureRequestMergeFrom<T extends FeatureRequest$FeatureRequestMergeFromArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequest$FeatureRequestMergeFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findMany'> | Null>;

    FeatureRequestMergeInto<T extends FeatureRequest$FeatureRequestMergeIntoArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequest$FeatureRequestMergeIntoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FeatureRequest model
   */ 
  interface FeatureRequestFieldRefs {
    readonly id: FieldRef<"FeatureRequest", 'Int'>
    readonly title: FieldRef<"FeatureRequest", 'String'>
    readonly description: FieldRef<"FeatureRequest", 'String'>
    readonly dateSubmitted: FieldRef<"FeatureRequest", 'DateTime'>
    readonly userId: FieldRef<"FeatureRequest", 'Int'>
    readonly categoryId: FieldRef<"FeatureRequest", 'Int'>
    readonly statusId: FieldRef<"FeatureRequest", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * FeatureRequest findUnique
   */
  export type FeatureRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequest to fetch.
     */
    where: FeatureRequestWhereUniqueInput
  }


  /**
   * FeatureRequest findUniqueOrThrow
   */
  export type FeatureRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequest to fetch.
     */
    where: FeatureRequestWhereUniqueInput
  }


  /**
   * FeatureRequest findFirst
   */
  export type FeatureRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequest to fetch.
     */
    where?: FeatureRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequests to fetch.
     */
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureRequests.
     */
    cursor?: FeatureRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureRequests.
     */
    distinct?: FeatureRequestScalarFieldEnum | FeatureRequestScalarFieldEnum[]
  }


  /**
   * FeatureRequest findFirstOrThrow
   */
  export type FeatureRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequest to fetch.
     */
    where?: FeatureRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequests to fetch.
     */
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureRequests.
     */
    cursor?: FeatureRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureRequests.
     */
    distinct?: FeatureRequestScalarFieldEnum | FeatureRequestScalarFieldEnum[]
  }


  /**
   * FeatureRequest findMany
   */
  export type FeatureRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequests to fetch.
     */
    where?: FeatureRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequests to fetch.
     */
    orderBy?: FeatureRequestOrderByWithRelationInput | FeatureRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeatureRequests.
     */
    cursor?: FeatureRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequests.
     */
    skip?: number
    distinct?: FeatureRequestScalarFieldEnum | FeatureRequestScalarFieldEnum[]
  }


  /**
   * FeatureRequest create
   */
  export type FeatureRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a FeatureRequest.
     */
    data: XOR<FeatureRequestCreateInput, FeatureRequestUncheckedCreateInput>
  }


  /**
   * FeatureRequest createMany
   */
  export type FeatureRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeatureRequests.
     */
    data: FeatureRequestCreateManyInput | FeatureRequestCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FeatureRequest update
   */
  export type FeatureRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a FeatureRequest.
     */
    data: XOR<FeatureRequestUpdateInput, FeatureRequestUncheckedUpdateInput>
    /**
     * Choose, which FeatureRequest to update.
     */
    where: FeatureRequestWhereUniqueInput
  }


  /**
   * FeatureRequest updateMany
   */
  export type FeatureRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeatureRequests.
     */
    data: XOR<FeatureRequestUpdateManyMutationInput, FeatureRequestUncheckedUpdateManyInput>
    /**
     * Filter which FeatureRequests to update
     */
    where?: FeatureRequestWhereInput
  }


  /**
   * FeatureRequest upsert
   */
  export type FeatureRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the FeatureRequest to update in case it exists.
     */
    where: FeatureRequestWhereUniqueInput
    /**
     * In case the FeatureRequest found by the `where` argument doesn't exist, create a new FeatureRequest with this data.
     */
    create: XOR<FeatureRequestCreateInput, FeatureRequestUncheckedCreateInput>
    /**
     * In case the FeatureRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureRequestUpdateInput, FeatureRequestUncheckedUpdateInput>
  }


  /**
   * FeatureRequest delete
   */
  export type FeatureRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
    /**
     * Filter which FeatureRequest to delete.
     */
    where: FeatureRequestWhereUniqueInput
  }


  /**
   * FeatureRequest deleteMany
   */
  export type FeatureRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureRequests to delete
     */
    where?: FeatureRequestWhereInput
  }


  /**
   * FeatureRequest.comments
   */
  export type FeatureRequest$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * FeatureRequest.featureUpvotes
   */
  export type FeatureRequest$featureUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    where?: FeatureUpvoteWhereInput
    orderBy?: FeatureUpvoteOrderByWithRelationInput | FeatureUpvoteOrderByWithRelationInput[]
    cursor?: FeatureUpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureUpvoteScalarFieldEnum | FeatureUpvoteScalarFieldEnum[]
  }


  /**
   * FeatureRequest.Notification
   */
  export type FeatureRequest$NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * FeatureRequest.FeatureRequestMergeFrom
   */
  export type FeatureRequest$FeatureRequestMergeFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    where?: FeatureRequestMergeWhereInput
    orderBy?: FeatureRequestMergeOrderByWithRelationInput | FeatureRequestMergeOrderByWithRelationInput[]
    cursor?: FeatureRequestMergeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureRequestMergeScalarFieldEnum | FeatureRequestMergeScalarFieldEnum[]
  }


  /**
   * FeatureRequest.FeatureRequestMergeInto
   */
  export type FeatureRequest$FeatureRequestMergeIntoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    where?: FeatureRequestMergeWhereInput
    orderBy?: FeatureRequestMergeOrderByWithRelationInput | FeatureRequestMergeOrderByWithRelationInput[]
    cursor?: FeatureRequestMergeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureRequestMergeScalarFieldEnum | FeatureRequestMergeScalarFieldEnum[]
  }


  /**
   * FeatureRequest without action
   */
  export type FeatureRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequest
     */
    select?: FeatureRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestInclude<ExtArgs> | null
  }



  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    featureRequestId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    featureRequestId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    comment: string | null
    dateSubmitted: Date | null
    userId: number | null
    featureRequestId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    comment: string | null
    dateSubmitted: Date | null
    userId: number | null
    featureRequestId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    comment: number
    dateSubmitted: number
    userId: number
    featureRequestId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    userId?: true
    featureRequestId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    userId?: true
    featureRequestId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    comment?: true
    dateSubmitted?: true
    userId?: true
    featureRequestId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    comment?: true
    dateSubmitted?: true
    userId?: true
    featureRequestId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    comment?: true
    dateSubmitted?: true
    userId?: true
    featureRequestId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    comment: string
    dateSubmitted: Date
    userId: number
    featureRequestId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    dateSubmitted?: boolean
    userId?: boolean
    featureRequestId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    featureRequest?: boolean | FeatureRequestDefaultArgs<ExtArgs>
    commentReplys?: boolean | Comment$commentReplysArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    comment?: boolean
    dateSubmitted?: boolean
    userId?: boolean
    featureRequestId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    featureRequest?: boolean | FeatureRequestDefaultArgs<ExtArgs>
    commentReplys?: boolean | Comment$commentReplysArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      featureRequest: Prisma.$FeatureRequestPayload<ExtArgs>
      commentReplys: Prisma.$CommentReplyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      comment: string
      dateSubmitted: Date
      userId: number
      featureRequestId: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    featureRequest<T extends FeatureRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequestDefaultArgs<ExtArgs>>): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    commentReplys<T extends Comment$commentReplysArgs<ExtArgs> = {}>(args?: Subset<T, Comment$commentReplysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly comment: FieldRef<"Comment", 'String'>
    readonly dateSubmitted: FieldRef<"Comment", 'DateTime'>
    readonly userId: FieldRef<"Comment", 'Int'>
    readonly featureRequestId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment.commentReplys
   */
  export type Comment$commentReplysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    where?: CommentReplyWhereInput
    orderBy?: CommentReplyOrderByWithRelationInput | CommentReplyOrderByWithRelationInput[]
    cursor?: CommentReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentReplyScalarFieldEnum | CommentReplyScalarFieldEnum[]
  }


  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
  }



  /**
   * Model CommentReply
   */

  export type AggregateCommentReply = {
    _count: CommentReplyCountAggregateOutputType | null
    _avg: CommentReplyAvgAggregateOutputType | null
    _sum: CommentReplySumAggregateOutputType | null
    _min: CommentReplyMinAggregateOutputType | null
    _max: CommentReplyMaxAggregateOutputType | null
  }

  export type CommentReplyAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    commentId: number | null
  }

  export type CommentReplySumAggregateOutputType = {
    id: number | null
    userId: number | null
    commentId: number | null
  }

  export type CommentReplyMinAggregateOutputType = {
    id: number | null
    comment: string | null
    dateSubmitted: Date | null
    userId: number | null
    commentId: number | null
  }

  export type CommentReplyMaxAggregateOutputType = {
    id: number | null
    comment: string | null
    dateSubmitted: Date | null
    userId: number | null
    commentId: number | null
  }

  export type CommentReplyCountAggregateOutputType = {
    id: number
    comment: number
    dateSubmitted: number
    userId: number
    commentId: number
    _all: number
  }


  export type CommentReplyAvgAggregateInputType = {
    id?: true
    userId?: true
    commentId?: true
  }

  export type CommentReplySumAggregateInputType = {
    id?: true
    userId?: true
    commentId?: true
  }

  export type CommentReplyMinAggregateInputType = {
    id?: true
    comment?: true
    dateSubmitted?: true
    userId?: true
    commentId?: true
  }

  export type CommentReplyMaxAggregateInputType = {
    id?: true
    comment?: true
    dateSubmitted?: true
    userId?: true
    commentId?: true
  }

  export type CommentReplyCountAggregateInputType = {
    id?: true
    comment?: true
    dateSubmitted?: true
    userId?: true
    commentId?: true
    _all?: true
  }

  export type CommentReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentReply to aggregate.
     */
    where?: CommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentReplies to fetch.
     */
    orderBy?: CommentReplyOrderByWithRelationInput | CommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommentReplies
    **/
    _count?: true | CommentReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentReplyMaxAggregateInputType
  }

  export type GetCommentReplyAggregateType<T extends CommentReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentReply[P]>
      : GetScalarType<T[P], AggregateCommentReply[P]>
  }




  export type CommentReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentReplyWhereInput
    orderBy?: CommentReplyOrderByWithAggregationInput | CommentReplyOrderByWithAggregationInput[]
    by: CommentReplyScalarFieldEnum[] | CommentReplyScalarFieldEnum
    having?: CommentReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentReplyCountAggregateInputType | true
    _avg?: CommentReplyAvgAggregateInputType
    _sum?: CommentReplySumAggregateInputType
    _min?: CommentReplyMinAggregateInputType
    _max?: CommentReplyMaxAggregateInputType
  }

  export type CommentReplyGroupByOutputType = {
    id: number
    comment: string
    dateSubmitted: Date
    userId: number
    commentId: number
    _count: CommentReplyCountAggregateOutputType | null
    _avg: CommentReplyAvgAggregateOutputType | null
    _sum: CommentReplySumAggregateOutputType | null
    _min: CommentReplyMinAggregateOutputType | null
    _max: CommentReplyMaxAggregateOutputType | null
  }

  type GetCommentReplyGroupByPayload<T extends CommentReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentReplyGroupByOutputType[P]>
            : GetScalarType<T[P], CommentReplyGroupByOutputType[P]>
        }
      >
    >


  export type CommentReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    dateSubmitted?: boolean
    userId?: boolean
    commentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment_relation?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentReply"]>

  export type CommentReplySelectScalar = {
    id?: boolean
    comment?: boolean
    dateSubmitted?: boolean
    userId?: boolean
    commentId?: boolean
  }

  export type CommentReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment_relation?: boolean | CommentDefaultArgs<ExtArgs>
  }


  export type $CommentReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommentReply"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      comment_relation: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      comment: string
      dateSubmitted: Date
      userId: number
      commentId: number
    }, ExtArgs["result"]["commentReply"]>
    composites: {}
  }


  type CommentReplyGetPayload<S extends boolean | null | undefined | CommentReplyDefaultArgs> = $Result.GetResult<Prisma.$CommentReplyPayload, S>

  type CommentReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentReplyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CommentReplyCountAggregateInputType | true
    }

  export interface CommentReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommentReply'], meta: { name: 'CommentReply' } }
    /**
     * Find zero or one CommentReply that matches the filter.
     * @param {CommentReplyFindUniqueArgs} args - Arguments to find a CommentReply
     * @example
     * // Get one CommentReply
     * const commentReply = await prisma.commentReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentReplyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentReplyFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommentReply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentReplyFindUniqueOrThrowArgs} args - Arguments to find a CommentReply
     * @example
     * // Get one CommentReply
     * const commentReply = await prisma.commentReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentReplyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentReplyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommentReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyFindFirstArgs} args - Arguments to find a CommentReply
     * @example
     * // Get one CommentReply
     * const commentReply = await prisma.commentReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentReplyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentReplyFindFirstArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommentReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyFindFirstOrThrowArgs} args - Arguments to find a CommentReply
     * @example
     * // Get one CommentReply
     * const commentReply = await prisma.commentReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentReplyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentReplyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommentReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentReplies
     * const commentReplies = await prisma.commentReply.findMany()
     * 
     * // Get first 10 CommentReplies
     * const commentReplies = await prisma.commentReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentReplyWithIdOnly = await prisma.commentReply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentReplyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentReplyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommentReply.
     * @param {CommentReplyCreateArgs} args - Arguments to create a CommentReply.
     * @example
     * // Create one CommentReply
     * const CommentReply = await prisma.commentReply.create({
     *   data: {
     *     // ... data to create a CommentReply
     *   }
     * })
     * 
    **/
    create<T extends CommentReplyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentReplyCreateArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CommentReplies.
     *     @param {CommentReplyCreateManyArgs} args - Arguments to create many CommentReplies.
     *     @example
     *     // Create many CommentReplies
     *     const commentReply = await prisma.commentReply.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentReplyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentReplyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommentReply.
     * @param {CommentReplyDeleteArgs} args - Arguments to delete one CommentReply.
     * @example
     * // Delete one CommentReply
     * const CommentReply = await prisma.commentReply.delete({
     *   where: {
     *     // ... filter to delete one CommentReply
     *   }
     * })
     * 
    **/
    delete<T extends CommentReplyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentReplyDeleteArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommentReply.
     * @param {CommentReplyUpdateArgs} args - Arguments to update one CommentReply.
     * @example
     * // Update one CommentReply
     * const commentReply = await prisma.commentReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentReplyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentReplyUpdateArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommentReplies.
     * @param {CommentReplyDeleteManyArgs} args - Arguments to filter CommentReplies to delete.
     * @example
     * // Delete a few CommentReplies
     * const { count } = await prisma.commentReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentReplyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentReplyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentReplies
     * const commentReply = await prisma.commentReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentReplyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentReplyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommentReply.
     * @param {CommentReplyUpsertArgs} args - Arguments to update or create a CommentReply.
     * @example
     * // Update or create a CommentReply
     * const commentReply = await prisma.commentReply.upsert({
     *   create: {
     *     // ... data to create a CommentReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentReply we want to update
     *   }
     * })
    **/
    upsert<T extends CommentReplyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentReplyUpsertArgs<ExtArgs>>
    ): Prisma__CommentReplyClient<$Result.GetResult<Prisma.$CommentReplyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommentReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyCountArgs} args - Arguments to filter CommentReplies to count.
     * @example
     * // Count the number of CommentReplies
     * const count = await prisma.commentReply.count({
     *   where: {
     *     // ... the filter for the CommentReplies we want to count
     *   }
     * })
    **/
    count<T extends CommentReplyCountArgs>(
      args?: Subset<T, CommentReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentReplyAggregateArgs>(args: Subset<T, CommentReplyAggregateArgs>): Prisma.PrismaPromise<GetCommentReplyAggregateType<T>>

    /**
     * Group by CommentReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentReplyGroupByArgs['orderBy'] }
        : { orderBy?: CommentReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommentReply model
   */
  readonly fields: CommentReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommentReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    comment_relation<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CommentReply model
   */ 
  interface CommentReplyFieldRefs {
    readonly id: FieldRef<"CommentReply", 'Int'>
    readonly comment: FieldRef<"CommentReply", 'String'>
    readonly dateSubmitted: FieldRef<"CommentReply", 'DateTime'>
    readonly userId: FieldRef<"CommentReply", 'Int'>
    readonly commentId: FieldRef<"CommentReply", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CommentReply findUnique
   */
  export type CommentReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which CommentReply to fetch.
     */
    where: CommentReplyWhereUniqueInput
  }


  /**
   * CommentReply findUniqueOrThrow
   */
  export type CommentReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which CommentReply to fetch.
     */
    where: CommentReplyWhereUniqueInput
  }


  /**
   * CommentReply findFirst
   */
  export type CommentReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which CommentReply to fetch.
     */
    where?: CommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentReplies to fetch.
     */
    orderBy?: CommentReplyOrderByWithRelationInput | CommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentReplies.
     */
    cursor?: CommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentReplies.
     */
    distinct?: CommentReplyScalarFieldEnum | CommentReplyScalarFieldEnum[]
  }


  /**
   * CommentReply findFirstOrThrow
   */
  export type CommentReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which CommentReply to fetch.
     */
    where?: CommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentReplies to fetch.
     */
    orderBy?: CommentReplyOrderByWithRelationInput | CommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentReplies.
     */
    cursor?: CommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentReplies.
     */
    distinct?: CommentReplyScalarFieldEnum | CommentReplyScalarFieldEnum[]
  }


  /**
   * CommentReply findMany
   */
  export type CommentReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which CommentReplies to fetch.
     */
    where?: CommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentReplies to fetch.
     */
    orderBy?: CommentReplyOrderByWithRelationInput | CommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommentReplies.
     */
    cursor?: CommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentReplies.
     */
    skip?: number
    distinct?: CommentReplyScalarFieldEnum | CommentReplyScalarFieldEnum[]
  }


  /**
   * CommentReply create
   */
  export type CommentReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a CommentReply.
     */
    data: XOR<CommentReplyCreateInput, CommentReplyUncheckedCreateInput>
  }


  /**
   * CommentReply createMany
   */
  export type CommentReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommentReplies.
     */
    data: CommentReplyCreateManyInput | CommentReplyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CommentReply update
   */
  export type CommentReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a CommentReply.
     */
    data: XOR<CommentReplyUpdateInput, CommentReplyUncheckedUpdateInput>
    /**
     * Choose, which CommentReply to update.
     */
    where: CommentReplyWhereUniqueInput
  }


  /**
   * CommentReply updateMany
   */
  export type CommentReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommentReplies.
     */
    data: XOR<CommentReplyUpdateManyMutationInput, CommentReplyUncheckedUpdateManyInput>
    /**
     * Filter which CommentReplies to update
     */
    where?: CommentReplyWhereInput
  }


  /**
   * CommentReply upsert
   */
  export type CommentReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the CommentReply to update in case it exists.
     */
    where: CommentReplyWhereUniqueInput
    /**
     * In case the CommentReply found by the `where` argument doesn't exist, create a new CommentReply with this data.
     */
    create: XOR<CommentReplyCreateInput, CommentReplyUncheckedCreateInput>
    /**
     * In case the CommentReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentReplyUpdateInput, CommentReplyUncheckedUpdateInput>
  }


  /**
   * CommentReply delete
   */
  export type CommentReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
    /**
     * Filter which CommentReply to delete.
     */
    where: CommentReplyWhereUniqueInput
  }


  /**
   * CommentReply deleteMany
   */
  export type CommentReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentReplies to delete
     */
    where?: CommentReplyWhereInput
  }


  /**
   * CommentReply without action
   */
  export type CommentReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentReply
     */
    select?: CommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentReplyInclude<ExtArgs> | null
  }



  /**
   * Model FeatureUpvote
   */

  export type AggregateFeatureUpvote = {
    _count: FeatureUpvoteCountAggregateOutputType | null
    _avg: FeatureUpvoteAvgAggregateOutputType | null
    _sum: FeatureUpvoteSumAggregateOutputType | null
    _min: FeatureUpvoteMinAggregateOutputType | null
    _max: FeatureUpvoteMaxAggregateOutputType | null
  }

  export type FeatureUpvoteAvgAggregateOutputType = {
    userId: number | null
    featureRequestId: number | null
  }

  export type FeatureUpvoteSumAggregateOutputType = {
    userId: number | null
    featureRequestId: number | null
  }

  export type FeatureUpvoteMinAggregateOutputType = {
    userId: number | null
    featureRequestId: number | null
  }

  export type FeatureUpvoteMaxAggregateOutputType = {
    userId: number | null
    featureRequestId: number | null
  }

  export type FeatureUpvoteCountAggregateOutputType = {
    userId: number
    featureRequestId: number
    _all: number
  }


  export type FeatureUpvoteAvgAggregateInputType = {
    userId?: true
    featureRequestId?: true
  }

  export type FeatureUpvoteSumAggregateInputType = {
    userId?: true
    featureRequestId?: true
  }

  export type FeatureUpvoteMinAggregateInputType = {
    userId?: true
    featureRequestId?: true
  }

  export type FeatureUpvoteMaxAggregateInputType = {
    userId?: true
    featureRequestId?: true
  }

  export type FeatureUpvoteCountAggregateInputType = {
    userId?: true
    featureRequestId?: true
    _all?: true
  }

  export type FeatureUpvoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureUpvote to aggregate.
     */
    where?: FeatureUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUpvotes to fetch.
     */
    orderBy?: FeatureUpvoteOrderByWithRelationInput | FeatureUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUpvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeatureUpvotes
    **/
    _count?: true | FeatureUpvoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeatureUpvoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeatureUpvoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureUpvoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureUpvoteMaxAggregateInputType
  }

  export type GetFeatureUpvoteAggregateType<T extends FeatureUpvoteAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatureUpvote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatureUpvote[P]>
      : GetScalarType<T[P], AggregateFeatureUpvote[P]>
  }




  export type FeatureUpvoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureUpvoteWhereInput
    orderBy?: FeatureUpvoteOrderByWithAggregationInput | FeatureUpvoteOrderByWithAggregationInput[]
    by: FeatureUpvoteScalarFieldEnum[] | FeatureUpvoteScalarFieldEnum
    having?: FeatureUpvoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureUpvoteCountAggregateInputType | true
    _avg?: FeatureUpvoteAvgAggregateInputType
    _sum?: FeatureUpvoteSumAggregateInputType
    _min?: FeatureUpvoteMinAggregateInputType
    _max?: FeatureUpvoteMaxAggregateInputType
  }

  export type FeatureUpvoteGroupByOutputType = {
    userId: number
    featureRequestId: number
    _count: FeatureUpvoteCountAggregateOutputType | null
    _avg: FeatureUpvoteAvgAggregateOutputType | null
    _sum: FeatureUpvoteSumAggregateOutputType | null
    _min: FeatureUpvoteMinAggregateOutputType | null
    _max: FeatureUpvoteMaxAggregateOutputType | null
  }

  type GetFeatureUpvoteGroupByPayload<T extends FeatureUpvoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureUpvoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureUpvoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureUpvoteGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureUpvoteGroupByOutputType[P]>
        }
      >
    >


  export type FeatureUpvoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    featureRequestId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    featureRequest?: boolean | FeatureRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureUpvote"]>

  export type FeatureUpvoteSelectScalar = {
    userId?: boolean
    featureRequestId?: boolean
  }

  export type FeatureUpvoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    featureRequest?: boolean | FeatureRequestDefaultArgs<ExtArgs>
  }


  export type $FeatureUpvotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeatureUpvote"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      featureRequest: Prisma.$FeatureRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      featureRequestId: number
    }, ExtArgs["result"]["featureUpvote"]>
    composites: {}
  }


  type FeatureUpvoteGetPayload<S extends boolean | null | undefined | FeatureUpvoteDefaultArgs> = $Result.GetResult<Prisma.$FeatureUpvotePayload, S>

  type FeatureUpvoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeatureUpvoteFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FeatureUpvoteCountAggregateInputType | true
    }

  export interface FeatureUpvoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeatureUpvote'], meta: { name: 'FeatureUpvote' } }
    /**
     * Find zero or one FeatureUpvote that matches the filter.
     * @param {FeatureUpvoteFindUniqueArgs} args - Arguments to find a FeatureUpvote
     * @example
     * // Get one FeatureUpvote
     * const featureUpvote = await prisma.featureUpvote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeatureUpvoteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureUpvoteFindUniqueArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeatureUpvote that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeatureUpvoteFindUniqueOrThrowArgs} args - Arguments to find a FeatureUpvote
     * @example
     * // Get one FeatureUpvote
     * const featureUpvote = await prisma.featureUpvote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeatureUpvoteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureUpvoteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeatureUpvote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteFindFirstArgs} args - Arguments to find a FeatureUpvote
     * @example
     * // Get one FeatureUpvote
     * const featureUpvote = await prisma.featureUpvote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeatureUpvoteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureUpvoteFindFirstArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeatureUpvote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteFindFirstOrThrowArgs} args - Arguments to find a FeatureUpvote
     * @example
     * // Get one FeatureUpvote
     * const featureUpvote = await prisma.featureUpvote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeatureUpvoteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureUpvoteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeatureUpvotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeatureUpvotes
     * const featureUpvotes = await prisma.featureUpvote.findMany()
     * 
     * // Get first 10 FeatureUpvotes
     * const featureUpvotes = await prisma.featureUpvote.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const featureUpvoteWithUserIdOnly = await prisma.featureUpvote.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends FeatureUpvoteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureUpvoteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeatureUpvote.
     * @param {FeatureUpvoteCreateArgs} args - Arguments to create a FeatureUpvote.
     * @example
     * // Create one FeatureUpvote
     * const FeatureUpvote = await prisma.featureUpvote.create({
     *   data: {
     *     // ... data to create a FeatureUpvote
     *   }
     * })
     * 
    **/
    create<T extends FeatureUpvoteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureUpvoteCreateArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeatureUpvotes.
     *     @param {FeatureUpvoteCreateManyArgs} args - Arguments to create many FeatureUpvotes.
     *     @example
     *     // Create many FeatureUpvotes
     *     const featureUpvote = await prisma.featureUpvote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeatureUpvoteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureUpvoteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeatureUpvote.
     * @param {FeatureUpvoteDeleteArgs} args - Arguments to delete one FeatureUpvote.
     * @example
     * // Delete one FeatureUpvote
     * const FeatureUpvote = await prisma.featureUpvote.delete({
     *   where: {
     *     // ... filter to delete one FeatureUpvote
     *   }
     * })
     * 
    **/
    delete<T extends FeatureUpvoteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureUpvoteDeleteArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeatureUpvote.
     * @param {FeatureUpvoteUpdateArgs} args - Arguments to update one FeatureUpvote.
     * @example
     * // Update one FeatureUpvote
     * const featureUpvote = await prisma.featureUpvote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeatureUpvoteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureUpvoteUpdateArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeatureUpvotes.
     * @param {FeatureUpvoteDeleteManyArgs} args - Arguments to filter FeatureUpvotes to delete.
     * @example
     * // Delete a few FeatureUpvotes
     * const { count } = await prisma.featureUpvote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeatureUpvoteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureUpvoteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureUpvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeatureUpvotes
     * const featureUpvote = await prisma.featureUpvote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeatureUpvoteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureUpvoteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeatureUpvote.
     * @param {FeatureUpvoteUpsertArgs} args - Arguments to update or create a FeatureUpvote.
     * @example
     * // Update or create a FeatureUpvote
     * const featureUpvote = await prisma.featureUpvote.upsert({
     *   create: {
     *     // ... data to create a FeatureUpvote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeatureUpvote we want to update
     *   }
     * })
    **/
    upsert<T extends FeatureUpvoteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureUpvoteUpsertArgs<ExtArgs>>
    ): Prisma__FeatureUpvoteClient<$Result.GetResult<Prisma.$FeatureUpvotePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeatureUpvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteCountArgs} args - Arguments to filter FeatureUpvotes to count.
     * @example
     * // Count the number of FeatureUpvotes
     * const count = await prisma.featureUpvote.count({
     *   where: {
     *     // ... the filter for the FeatureUpvotes we want to count
     *   }
     * })
    **/
    count<T extends FeatureUpvoteCountArgs>(
      args?: Subset<T, FeatureUpvoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureUpvoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeatureUpvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureUpvoteAggregateArgs>(args: Subset<T, FeatureUpvoteAggregateArgs>): Prisma.PrismaPromise<GetFeatureUpvoteAggregateType<T>>

    /**
     * Group by FeatureUpvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpvoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureUpvoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureUpvoteGroupByArgs['orderBy'] }
        : { orderBy?: FeatureUpvoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureUpvoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureUpvoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeatureUpvote model
   */
  readonly fields: FeatureUpvoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeatureUpvote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureUpvoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    featureRequest<T extends FeatureRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequestDefaultArgs<ExtArgs>>): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FeatureUpvote model
   */ 
  interface FeatureUpvoteFieldRefs {
    readonly userId: FieldRef<"FeatureUpvote", 'Int'>
    readonly featureRequestId: FieldRef<"FeatureUpvote", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * FeatureUpvote findUnique
   */
  export type FeatureUpvoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUpvote to fetch.
     */
    where: FeatureUpvoteWhereUniqueInput
  }


  /**
   * FeatureUpvote findUniqueOrThrow
   */
  export type FeatureUpvoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUpvote to fetch.
     */
    where: FeatureUpvoteWhereUniqueInput
  }


  /**
   * FeatureUpvote findFirst
   */
  export type FeatureUpvoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUpvote to fetch.
     */
    where?: FeatureUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUpvotes to fetch.
     */
    orderBy?: FeatureUpvoteOrderByWithRelationInput | FeatureUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureUpvotes.
     */
    cursor?: FeatureUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUpvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureUpvotes.
     */
    distinct?: FeatureUpvoteScalarFieldEnum | FeatureUpvoteScalarFieldEnum[]
  }


  /**
   * FeatureUpvote findFirstOrThrow
   */
  export type FeatureUpvoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUpvote to fetch.
     */
    where?: FeatureUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUpvotes to fetch.
     */
    orderBy?: FeatureUpvoteOrderByWithRelationInput | FeatureUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureUpvotes.
     */
    cursor?: FeatureUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUpvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureUpvotes.
     */
    distinct?: FeatureUpvoteScalarFieldEnum | FeatureUpvoteScalarFieldEnum[]
  }


  /**
   * FeatureUpvote findMany
   */
  export type FeatureUpvoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUpvotes to fetch.
     */
    where?: FeatureUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUpvotes to fetch.
     */
    orderBy?: FeatureUpvoteOrderByWithRelationInput | FeatureUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeatureUpvotes.
     */
    cursor?: FeatureUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUpvotes.
     */
    skip?: number
    distinct?: FeatureUpvoteScalarFieldEnum | FeatureUpvoteScalarFieldEnum[]
  }


  /**
   * FeatureUpvote create
   */
  export type FeatureUpvoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * The data needed to create a FeatureUpvote.
     */
    data: XOR<FeatureUpvoteCreateInput, FeatureUpvoteUncheckedCreateInput>
  }


  /**
   * FeatureUpvote createMany
   */
  export type FeatureUpvoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeatureUpvotes.
     */
    data: FeatureUpvoteCreateManyInput | FeatureUpvoteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FeatureUpvote update
   */
  export type FeatureUpvoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * The data needed to update a FeatureUpvote.
     */
    data: XOR<FeatureUpvoteUpdateInput, FeatureUpvoteUncheckedUpdateInput>
    /**
     * Choose, which FeatureUpvote to update.
     */
    where: FeatureUpvoteWhereUniqueInput
  }


  /**
   * FeatureUpvote updateMany
   */
  export type FeatureUpvoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeatureUpvotes.
     */
    data: XOR<FeatureUpvoteUpdateManyMutationInput, FeatureUpvoteUncheckedUpdateManyInput>
    /**
     * Filter which FeatureUpvotes to update
     */
    where?: FeatureUpvoteWhereInput
  }


  /**
   * FeatureUpvote upsert
   */
  export type FeatureUpvoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * The filter to search for the FeatureUpvote to update in case it exists.
     */
    where: FeatureUpvoteWhereUniqueInput
    /**
     * In case the FeatureUpvote found by the `where` argument doesn't exist, create a new FeatureUpvote with this data.
     */
    create: XOR<FeatureUpvoteCreateInput, FeatureUpvoteUncheckedCreateInput>
    /**
     * In case the FeatureUpvote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureUpvoteUpdateInput, FeatureUpvoteUncheckedUpdateInput>
  }


  /**
   * FeatureUpvote delete
   */
  export type FeatureUpvoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
    /**
     * Filter which FeatureUpvote to delete.
     */
    where: FeatureUpvoteWhereUniqueInput
  }


  /**
   * FeatureUpvote deleteMany
   */
  export type FeatureUpvoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureUpvotes to delete
     */
    where?: FeatureUpvoteWhereInput
  }


  /**
   * FeatureUpvote without action
   */
  export type FeatureUpvoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUpvote
     */
    select?: FeatureUpvoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureUpvoteInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
    featureRequestId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
    featureRequestId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
    featureRequestId: number | null
    type: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
    featureRequestId: number | null
    type: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    ownerId: number
    userId: number
    featureRequestId: number
    type: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    featureRequestId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    featureRequestId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    featureRequestId?: true
    type?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    featureRequestId?: true
    type?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    featureRequestId?: true
    type?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    ownerId: number
    userId: number
    featureRequestId: number
    type: string
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    userId?: boolean
    featureRequestId?: boolean
    type?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    featureRequest?: boolean | FeatureRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    ownerId?: boolean
    userId?: boolean
    featureRequestId?: boolean
    type?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    featureRequest?: boolean | FeatureRequestDefaultArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      featureRequest: Prisma.$FeatureRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ownerId: number
      userId: number
      featureRequestId: number
      type: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    featureRequest<T extends FeatureRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequestDefaultArgs<ExtArgs>>): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly ownerId: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly featureRequestId: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Model FeatureRequestMerge
   */

  export type AggregateFeatureRequestMerge = {
    _count: FeatureRequestMergeCountAggregateOutputType | null
    _avg: FeatureRequestMergeAvgAggregateOutputType | null
    _sum: FeatureRequestMergeSumAggregateOutputType | null
    _min: FeatureRequestMergeMinAggregateOutputType | null
    _max: FeatureRequestMergeMaxAggregateOutputType | null
  }

  export type FeatureRequestMergeAvgAggregateOutputType = {
    id: number | null
    mergedIntoId: number | null
    mergedFromId: number | null
  }

  export type FeatureRequestMergeSumAggregateOutputType = {
    id: number | null
    mergedIntoId: number | null
    mergedFromId: number | null
  }

  export type FeatureRequestMergeMinAggregateOutputType = {
    id: number | null
    mergedIntoId: number | null
    mergedFromId: number | null
  }

  export type FeatureRequestMergeMaxAggregateOutputType = {
    id: number | null
    mergedIntoId: number | null
    mergedFromId: number | null
  }

  export type FeatureRequestMergeCountAggregateOutputType = {
    id: number
    mergedIntoId: number
    mergedFromId: number
    _all: number
  }


  export type FeatureRequestMergeAvgAggregateInputType = {
    id?: true
    mergedIntoId?: true
    mergedFromId?: true
  }

  export type FeatureRequestMergeSumAggregateInputType = {
    id?: true
    mergedIntoId?: true
    mergedFromId?: true
  }

  export type FeatureRequestMergeMinAggregateInputType = {
    id?: true
    mergedIntoId?: true
    mergedFromId?: true
  }

  export type FeatureRequestMergeMaxAggregateInputType = {
    id?: true
    mergedIntoId?: true
    mergedFromId?: true
  }

  export type FeatureRequestMergeCountAggregateInputType = {
    id?: true
    mergedIntoId?: true
    mergedFromId?: true
    _all?: true
  }

  export type FeatureRequestMergeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureRequestMerge to aggregate.
     */
    where?: FeatureRequestMergeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequestMerges to fetch.
     */
    orderBy?: FeatureRequestMergeOrderByWithRelationInput | FeatureRequestMergeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureRequestMergeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequestMerges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequestMerges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeatureRequestMerges
    **/
    _count?: true | FeatureRequestMergeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeatureRequestMergeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeatureRequestMergeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureRequestMergeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureRequestMergeMaxAggregateInputType
  }

  export type GetFeatureRequestMergeAggregateType<T extends FeatureRequestMergeAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatureRequestMerge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatureRequestMerge[P]>
      : GetScalarType<T[P], AggregateFeatureRequestMerge[P]>
  }




  export type FeatureRequestMergeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureRequestMergeWhereInput
    orderBy?: FeatureRequestMergeOrderByWithAggregationInput | FeatureRequestMergeOrderByWithAggregationInput[]
    by: FeatureRequestMergeScalarFieldEnum[] | FeatureRequestMergeScalarFieldEnum
    having?: FeatureRequestMergeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureRequestMergeCountAggregateInputType | true
    _avg?: FeatureRequestMergeAvgAggregateInputType
    _sum?: FeatureRequestMergeSumAggregateInputType
    _min?: FeatureRequestMergeMinAggregateInputType
    _max?: FeatureRequestMergeMaxAggregateInputType
  }

  export type FeatureRequestMergeGroupByOutputType = {
    id: number
    mergedIntoId: number
    mergedFromId: number
    _count: FeatureRequestMergeCountAggregateOutputType | null
    _avg: FeatureRequestMergeAvgAggregateOutputType | null
    _sum: FeatureRequestMergeSumAggregateOutputType | null
    _min: FeatureRequestMergeMinAggregateOutputType | null
    _max: FeatureRequestMergeMaxAggregateOutputType | null
  }

  type GetFeatureRequestMergeGroupByPayload<T extends FeatureRequestMergeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureRequestMergeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureRequestMergeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureRequestMergeGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureRequestMergeGroupByOutputType[P]>
        }
      >
    >


  export type FeatureRequestMergeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mergedIntoId?: boolean
    mergedFromId?: boolean
    mergedInto?: boolean | FeatureRequestDefaultArgs<ExtArgs>
    mergedFrom?: boolean | FeatureRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureRequestMerge"]>

  export type FeatureRequestMergeSelectScalar = {
    id?: boolean
    mergedIntoId?: boolean
    mergedFromId?: boolean
  }

  export type FeatureRequestMergeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mergedInto?: boolean | FeatureRequestDefaultArgs<ExtArgs>
    mergedFrom?: boolean | FeatureRequestDefaultArgs<ExtArgs>
  }


  export type $FeatureRequestMergePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeatureRequestMerge"
    objects: {
      mergedInto: Prisma.$FeatureRequestPayload<ExtArgs>
      mergedFrom: Prisma.$FeatureRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mergedIntoId: number
      mergedFromId: number
    }, ExtArgs["result"]["featureRequestMerge"]>
    composites: {}
  }


  type FeatureRequestMergeGetPayload<S extends boolean | null | undefined | FeatureRequestMergeDefaultArgs> = $Result.GetResult<Prisma.$FeatureRequestMergePayload, S>

  type FeatureRequestMergeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeatureRequestMergeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FeatureRequestMergeCountAggregateInputType | true
    }

  export interface FeatureRequestMergeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeatureRequestMerge'], meta: { name: 'FeatureRequestMerge' } }
    /**
     * Find zero or one FeatureRequestMerge that matches the filter.
     * @param {FeatureRequestMergeFindUniqueArgs} args - Arguments to find a FeatureRequestMerge
     * @example
     * // Get one FeatureRequestMerge
     * const featureRequestMerge = await prisma.featureRequestMerge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeatureRequestMergeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestMergeFindUniqueArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeatureRequestMerge that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeatureRequestMergeFindUniqueOrThrowArgs} args - Arguments to find a FeatureRequestMerge
     * @example
     * // Get one FeatureRequestMerge
     * const featureRequestMerge = await prisma.featureRequestMerge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeatureRequestMergeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestMergeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeatureRequestMerge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeFindFirstArgs} args - Arguments to find a FeatureRequestMerge
     * @example
     * // Get one FeatureRequestMerge
     * const featureRequestMerge = await prisma.featureRequestMerge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeatureRequestMergeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestMergeFindFirstArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeatureRequestMerge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeFindFirstOrThrowArgs} args - Arguments to find a FeatureRequestMerge
     * @example
     * // Get one FeatureRequestMerge
     * const featureRequestMerge = await prisma.featureRequestMerge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeatureRequestMergeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestMergeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeatureRequestMerges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeatureRequestMerges
     * const featureRequestMerges = await prisma.featureRequestMerge.findMany()
     * 
     * // Get first 10 FeatureRequestMerges
     * const featureRequestMerges = await prisma.featureRequestMerge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureRequestMergeWithIdOnly = await prisma.featureRequestMerge.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeatureRequestMergeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestMergeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeatureRequestMerge.
     * @param {FeatureRequestMergeCreateArgs} args - Arguments to create a FeatureRequestMerge.
     * @example
     * // Create one FeatureRequestMerge
     * const FeatureRequestMerge = await prisma.featureRequestMerge.create({
     *   data: {
     *     // ... data to create a FeatureRequestMerge
     *   }
     * })
     * 
    **/
    create<T extends FeatureRequestMergeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestMergeCreateArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeatureRequestMerges.
     *     @param {FeatureRequestMergeCreateManyArgs} args - Arguments to create many FeatureRequestMerges.
     *     @example
     *     // Create many FeatureRequestMerges
     *     const featureRequestMerge = await prisma.featureRequestMerge.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeatureRequestMergeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestMergeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeatureRequestMerge.
     * @param {FeatureRequestMergeDeleteArgs} args - Arguments to delete one FeatureRequestMerge.
     * @example
     * // Delete one FeatureRequestMerge
     * const FeatureRequestMerge = await prisma.featureRequestMerge.delete({
     *   where: {
     *     // ... filter to delete one FeatureRequestMerge
     *   }
     * })
     * 
    **/
    delete<T extends FeatureRequestMergeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestMergeDeleteArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeatureRequestMerge.
     * @param {FeatureRequestMergeUpdateArgs} args - Arguments to update one FeatureRequestMerge.
     * @example
     * // Update one FeatureRequestMerge
     * const featureRequestMerge = await prisma.featureRequestMerge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeatureRequestMergeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestMergeUpdateArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeatureRequestMerges.
     * @param {FeatureRequestMergeDeleteManyArgs} args - Arguments to filter FeatureRequestMerges to delete.
     * @example
     * // Delete a few FeatureRequestMerges
     * const { count } = await prisma.featureRequestMerge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeatureRequestMergeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeatureRequestMergeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureRequestMerges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeatureRequestMerges
     * const featureRequestMerge = await prisma.featureRequestMerge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeatureRequestMergeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestMergeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeatureRequestMerge.
     * @param {FeatureRequestMergeUpsertArgs} args - Arguments to update or create a FeatureRequestMerge.
     * @example
     * // Update or create a FeatureRequestMerge
     * const featureRequestMerge = await prisma.featureRequestMerge.upsert({
     *   create: {
     *     // ... data to create a FeatureRequestMerge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeatureRequestMerge we want to update
     *   }
     * })
    **/
    upsert<T extends FeatureRequestMergeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeatureRequestMergeUpsertArgs<ExtArgs>>
    ): Prisma__FeatureRequestMergeClient<$Result.GetResult<Prisma.$FeatureRequestMergePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeatureRequestMerges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeCountArgs} args - Arguments to filter FeatureRequestMerges to count.
     * @example
     * // Count the number of FeatureRequestMerges
     * const count = await prisma.featureRequestMerge.count({
     *   where: {
     *     // ... the filter for the FeatureRequestMerges we want to count
     *   }
     * })
    **/
    count<T extends FeatureRequestMergeCountArgs>(
      args?: Subset<T, FeatureRequestMergeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureRequestMergeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeatureRequestMerge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureRequestMergeAggregateArgs>(args: Subset<T, FeatureRequestMergeAggregateArgs>): Prisma.PrismaPromise<GetFeatureRequestMergeAggregateType<T>>

    /**
     * Group by FeatureRequestMerge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureRequestMergeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureRequestMergeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureRequestMergeGroupByArgs['orderBy'] }
        : { orderBy?: FeatureRequestMergeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureRequestMergeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureRequestMergeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeatureRequestMerge model
   */
  readonly fields: FeatureRequestMergeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeatureRequestMerge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureRequestMergeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mergedInto<T extends FeatureRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequestDefaultArgs<ExtArgs>>): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    mergedFrom<T extends FeatureRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureRequestDefaultArgs<ExtArgs>>): Prisma__FeatureRequestClient<$Result.GetResult<Prisma.$FeatureRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FeatureRequestMerge model
   */ 
  interface FeatureRequestMergeFieldRefs {
    readonly id: FieldRef<"FeatureRequestMerge", 'Int'>
    readonly mergedIntoId: FieldRef<"FeatureRequestMerge", 'Int'>
    readonly mergedFromId: FieldRef<"FeatureRequestMerge", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * FeatureRequestMerge findUnique
   */
  export type FeatureRequestMergeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequestMerge to fetch.
     */
    where: FeatureRequestMergeWhereUniqueInput
  }


  /**
   * FeatureRequestMerge findUniqueOrThrow
   */
  export type FeatureRequestMergeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequestMerge to fetch.
     */
    where: FeatureRequestMergeWhereUniqueInput
  }


  /**
   * FeatureRequestMerge findFirst
   */
  export type FeatureRequestMergeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequestMerge to fetch.
     */
    where?: FeatureRequestMergeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequestMerges to fetch.
     */
    orderBy?: FeatureRequestMergeOrderByWithRelationInput | FeatureRequestMergeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureRequestMerges.
     */
    cursor?: FeatureRequestMergeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequestMerges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequestMerges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureRequestMerges.
     */
    distinct?: FeatureRequestMergeScalarFieldEnum | FeatureRequestMergeScalarFieldEnum[]
  }


  /**
   * FeatureRequestMerge findFirstOrThrow
   */
  export type FeatureRequestMergeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequestMerge to fetch.
     */
    where?: FeatureRequestMergeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequestMerges to fetch.
     */
    orderBy?: FeatureRequestMergeOrderByWithRelationInput | FeatureRequestMergeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureRequestMerges.
     */
    cursor?: FeatureRequestMergeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequestMerges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequestMerges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureRequestMerges.
     */
    distinct?: FeatureRequestMergeScalarFieldEnum | FeatureRequestMergeScalarFieldEnum[]
  }


  /**
   * FeatureRequestMerge findMany
   */
  export type FeatureRequestMergeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * Filter, which FeatureRequestMerges to fetch.
     */
    where?: FeatureRequestMergeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureRequestMerges to fetch.
     */
    orderBy?: FeatureRequestMergeOrderByWithRelationInput | FeatureRequestMergeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeatureRequestMerges.
     */
    cursor?: FeatureRequestMergeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureRequestMerges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureRequestMerges.
     */
    skip?: number
    distinct?: FeatureRequestMergeScalarFieldEnum | FeatureRequestMergeScalarFieldEnum[]
  }


  /**
   * FeatureRequestMerge create
   */
  export type FeatureRequestMergeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * The data needed to create a FeatureRequestMerge.
     */
    data: XOR<FeatureRequestMergeCreateInput, FeatureRequestMergeUncheckedCreateInput>
  }


  /**
   * FeatureRequestMerge createMany
   */
  export type FeatureRequestMergeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeatureRequestMerges.
     */
    data: FeatureRequestMergeCreateManyInput | FeatureRequestMergeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FeatureRequestMerge update
   */
  export type FeatureRequestMergeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * The data needed to update a FeatureRequestMerge.
     */
    data: XOR<FeatureRequestMergeUpdateInput, FeatureRequestMergeUncheckedUpdateInput>
    /**
     * Choose, which FeatureRequestMerge to update.
     */
    where: FeatureRequestMergeWhereUniqueInput
  }


  /**
   * FeatureRequestMerge updateMany
   */
  export type FeatureRequestMergeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeatureRequestMerges.
     */
    data: XOR<FeatureRequestMergeUpdateManyMutationInput, FeatureRequestMergeUncheckedUpdateManyInput>
    /**
     * Filter which FeatureRequestMerges to update
     */
    where?: FeatureRequestMergeWhereInput
  }


  /**
   * FeatureRequestMerge upsert
   */
  export type FeatureRequestMergeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * The filter to search for the FeatureRequestMerge to update in case it exists.
     */
    where: FeatureRequestMergeWhereUniqueInput
    /**
     * In case the FeatureRequestMerge found by the `where` argument doesn't exist, create a new FeatureRequestMerge with this data.
     */
    create: XOR<FeatureRequestMergeCreateInput, FeatureRequestMergeUncheckedCreateInput>
    /**
     * In case the FeatureRequestMerge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureRequestMergeUpdateInput, FeatureRequestMergeUncheckedUpdateInput>
  }


  /**
   * FeatureRequestMerge delete
   */
  export type FeatureRequestMergeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
    /**
     * Filter which FeatureRequestMerge to delete.
     */
    where: FeatureRequestMergeWhereUniqueInput
  }


  /**
   * FeatureRequestMerge deleteMany
   */
  export type FeatureRequestMergeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureRequestMerges to delete
     */
    where?: FeatureRequestMergeWhereInput
  }


  /**
   * FeatureRequestMerge without action
   */
  export type FeatureRequestMergeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureRequestMerge
     */
    select?: FeatureRequestMergeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeatureRequestMergeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    avatarURL: 'avatarURL',
    email: 'email',
    name: 'name',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const FeatureRequestScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    dateSubmitted: 'dateSubmitted',
    userId: 'userId',
    categoryId: 'categoryId',
    statusId: 'statusId'
  };

  export type FeatureRequestScalarFieldEnum = (typeof FeatureRequestScalarFieldEnum)[keyof typeof FeatureRequestScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    dateSubmitted: 'dateSubmitted',
    userId: 'userId',
    featureRequestId: 'featureRequestId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CommentReplyScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    dateSubmitted: 'dateSubmitted',
    userId: 'userId',
    commentId: 'commentId'
  };

  export type CommentReplyScalarFieldEnum = (typeof CommentReplyScalarFieldEnum)[keyof typeof CommentReplyScalarFieldEnum]


  export const FeatureUpvoteScalarFieldEnum: {
    userId: 'userId',
    featureRequestId: 'featureRequestId'
  };

  export type FeatureUpvoteScalarFieldEnum = (typeof FeatureUpvoteScalarFieldEnum)[keyof typeof FeatureUpvoteScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    userId: 'userId',
    featureRequestId: 'featureRequestId',
    type: 'type'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const FeatureRequestMergeScalarFieldEnum: {
    id: 'id',
    mergedIntoId: 'mergedIntoId',
    mergedFromId: 'mergedFromId'
  };

  export type FeatureRequestMergeScalarFieldEnum = (typeof FeatureRequestMergeScalarFieldEnum)[keyof typeof FeatureRequestMergeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    avatarURL?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    featureRequests?: FeatureRequestListRelationFilter
    comments?: CommentListRelationFilter
    commentReplys?: CommentReplyListRelationFilter
    featureUpvotes?: FeatureUpvoteListRelationFilter
    ownerNotifications?: NotificationListRelationFilter
    userNotifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    avatarURL?: SortOrderInput | SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    featureRequests?: FeatureRequestOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    commentReplys?: CommentReplyOrderByRelationAggregateInput
    featureUpvotes?: FeatureUpvoteOrderByRelationAggregateInput
    ownerNotifications?: NotificationOrderByRelationAggregateInput
    userNotifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    avatarURL?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    featureRequests?: FeatureRequestListRelationFilter
    comments?: CommentListRelationFilter
    commentReplys?: CommentReplyListRelationFilter
    featureUpvotes?: FeatureUpvoteListRelationFilter
    ownerNotifications?: NotificationListRelationFilter
    userNotifications?: NotificationListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    avatarURL?: SortOrderInput | SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    avatarURL?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    featureRequests?: FeatureRequestListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    featureRequests?: FeatureRequestOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    featureRequests?: FeatureRequestListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: IntFilter<"Status"> | number
    name?: StringFilter<"Status"> | string
    color?: StringFilter<"Status"> | string
    featureRequests?: FeatureRequestListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    featureRequests?: FeatureRequestOrderByRelationAggregateInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    name?: StringFilter<"Status"> | string
    color?: StringFilter<"Status"> | string
    featureRequests?: FeatureRequestListRelationFilter
  }, "id">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status"> | number
    name?: StringWithAggregatesFilter<"Status"> | string
    color?: StringWithAggregatesFilter<"Status"> | string
  }

  export type FeatureRequestWhereInput = {
    AND?: FeatureRequestWhereInput | FeatureRequestWhereInput[]
    OR?: FeatureRequestWhereInput[]
    NOT?: FeatureRequestWhereInput | FeatureRequestWhereInput[]
    id?: IntFilter<"FeatureRequest"> | number
    title?: StringFilter<"FeatureRequest"> | string
    description?: StringFilter<"FeatureRequest"> | string
    dateSubmitted?: DateTimeFilter<"FeatureRequest"> | Date | string
    userId?: IntFilter<"FeatureRequest"> | number
    categoryId?: IntFilter<"FeatureRequest"> | number
    statusId?: IntFilter<"FeatureRequest"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    status?: XOR<StatusRelationFilter, StatusWhereInput>
    comments?: CommentListRelationFilter
    featureUpvotes?: FeatureUpvoteListRelationFilter
    Notification?: NotificationListRelationFilter
    FeatureRequestMergeFrom?: FeatureRequestMergeListRelationFilter
    FeatureRequestMergeInto?: FeatureRequestMergeListRelationFilter
  }

  export type FeatureRequestOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
    user?: UserOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    status?: StatusOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    featureUpvotes?: FeatureUpvoteOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
    FeatureRequestMergeFrom?: FeatureRequestMergeOrderByRelationAggregateInput
    FeatureRequestMergeInto?: FeatureRequestMergeOrderByRelationAggregateInput
  }

  export type FeatureRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeatureRequestWhereInput | FeatureRequestWhereInput[]
    OR?: FeatureRequestWhereInput[]
    NOT?: FeatureRequestWhereInput | FeatureRequestWhereInput[]
    title?: StringFilter<"FeatureRequest"> | string
    description?: StringFilter<"FeatureRequest"> | string
    dateSubmitted?: DateTimeFilter<"FeatureRequest"> | Date | string
    userId?: IntFilter<"FeatureRequest"> | number
    categoryId?: IntFilter<"FeatureRequest"> | number
    statusId?: IntFilter<"FeatureRequest"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    status?: XOR<StatusRelationFilter, StatusWhereInput>
    comments?: CommentListRelationFilter
    featureUpvotes?: FeatureUpvoteListRelationFilter
    Notification?: NotificationListRelationFilter
    FeatureRequestMergeFrom?: FeatureRequestMergeListRelationFilter
    FeatureRequestMergeInto?: FeatureRequestMergeListRelationFilter
  }, "id">

  export type FeatureRequestOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
    _count?: FeatureRequestCountOrderByAggregateInput
    _avg?: FeatureRequestAvgOrderByAggregateInput
    _max?: FeatureRequestMaxOrderByAggregateInput
    _min?: FeatureRequestMinOrderByAggregateInput
    _sum?: FeatureRequestSumOrderByAggregateInput
  }

  export type FeatureRequestScalarWhereWithAggregatesInput = {
    AND?: FeatureRequestScalarWhereWithAggregatesInput | FeatureRequestScalarWhereWithAggregatesInput[]
    OR?: FeatureRequestScalarWhereWithAggregatesInput[]
    NOT?: FeatureRequestScalarWhereWithAggregatesInput | FeatureRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeatureRequest"> | number
    title?: StringWithAggregatesFilter<"FeatureRequest"> | string
    description?: StringWithAggregatesFilter<"FeatureRequest"> | string
    dateSubmitted?: DateTimeWithAggregatesFilter<"FeatureRequest"> | Date | string
    userId?: IntWithAggregatesFilter<"FeatureRequest"> | number
    categoryId?: IntWithAggregatesFilter<"FeatureRequest"> | number
    statusId?: IntWithAggregatesFilter<"FeatureRequest"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    dateSubmitted?: DateTimeFilter<"Comment"> | Date | string
    userId?: IntFilter<"Comment"> | number
    featureRequestId?: IntFilter<"Comment"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    featureRequest?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
    commentReplys?: CommentReplyListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    user?: UserOrderByWithRelationInput
    featureRequest?: FeatureRequestOrderByWithRelationInput
    commentReplys?: CommentReplyOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    comment?: StringFilter<"Comment"> | string
    dateSubmitted?: DateTimeFilter<"Comment"> | Date | string
    userId?: IntFilter<"Comment"> | number
    featureRequestId?: IntFilter<"Comment"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    featureRequest?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
    commentReplys?: CommentReplyListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    comment?: StringWithAggregatesFilter<"Comment"> | string
    dateSubmitted?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    userId?: IntWithAggregatesFilter<"Comment"> | number
    featureRequestId?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type CommentReplyWhereInput = {
    AND?: CommentReplyWhereInput | CommentReplyWhereInput[]
    OR?: CommentReplyWhereInput[]
    NOT?: CommentReplyWhereInput | CommentReplyWhereInput[]
    id?: IntFilter<"CommentReply"> | number
    comment?: StringFilter<"CommentReply"> | string
    dateSubmitted?: DateTimeFilter<"CommentReply"> | Date | string
    userId?: IntFilter<"CommentReply"> | number
    commentId?: IntFilter<"CommentReply"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment_relation?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type CommentReplyOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    user?: UserOrderByWithRelationInput
    comment_relation?: CommentOrderByWithRelationInput
  }

  export type CommentReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentReplyWhereInput | CommentReplyWhereInput[]
    OR?: CommentReplyWhereInput[]
    NOT?: CommentReplyWhereInput | CommentReplyWhereInput[]
    comment?: StringFilter<"CommentReply"> | string
    dateSubmitted?: DateTimeFilter<"CommentReply"> | Date | string
    userId?: IntFilter<"CommentReply"> | number
    commentId?: IntFilter<"CommentReply"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment_relation?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "id">

  export type CommentReplyOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    _count?: CommentReplyCountOrderByAggregateInput
    _avg?: CommentReplyAvgOrderByAggregateInput
    _max?: CommentReplyMaxOrderByAggregateInput
    _min?: CommentReplyMinOrderByAggregateInput
    _sum?: CommentReplySumOrderByAggregateInput
  }

  export type CommentReplyScalarWhereWithAggregatesInput = {
    AND?: CommentReplyScalarWhereWithAggregatesInput | CommentReplyScalarWhereWithAggregatesInput[]
    OR?: CommentReplyScalarWhereWithAggregatesInput[]
    NOT?: CommentReplyScalarWhereWithAggregatesInput | CommentReplyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommentReply"> | number
    comment?: StringWithAggregatesFilter<"CommentReply"> | string
    dateSubmitted?: DateTimeWithAggregatesFilter<"CommentReply"> | Date | string
    userId?: IntWithAggregatesFilter<"CommentReply"> | number
    commentId?: IntWithAggregatesFilter<"CommentReply"> | number
  }

  export type FeatureUpvoteWhereInput = {
    AND?: FeatureUpvoteWhereInput | FeatureUpvoteWhereInput[]
    OR?: FeatureUpvoteWhereInput[]
    NOT?: FeatureUpvoteWhereInput | FeatureUpvoteWhereInput[]
    userId?: IntFilter<"FeatureUpvote"> | number
    featureRequestId?: IntFilter<"FeatureUpvote"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    featureRequest?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
  }

  export type FeatureUpvoteOrderByWithRelationInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
    user?: UserOrderByWithRelationInput
    featureRequest?: FeatureRequestOrderByWithRelationInput
  }

  export type FeatureUpvoteWhereUniqueInput = Prisma.AtLeast<{
    userId_featureRequestId?: FeatureUpvoteUserIdFeatureRequestIdCompoundUniqueInput
    AND?: FeatureUpvoteWhereInput | FeatureUpvoteWhereInput[]
    OR?: FeatureUpvoteWhereInput[]
    NOT?: FeatureUpvoteWhereInput | FeatureUpvoteWhereInput[]
    userId?: IntFilter<"FeatureUpvote"> | number
    featureRequestId?: IntFilter<"FeatureUpvote"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    featureRequest?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
  }, "userId_featureRequestId">

  export type FeatureUpvoteOrderByWithAggregationInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
    _count?: FeatureUpvoteCountOrderByAggregateInput
    _avg?: FeatureUpvoteAvgOrderByAggregateInput
    _max?: FeatureUpvoteMaxOrderByAggregateInput
    _min?: FeatureUpvoteMinOrderByAggregateInput
    _sum?: FeatureUpvoteSumOrderByAggregateInput
  }

  export type FeatureUpvoteScalarWhereWithAggregatesInput = {
    AND?: FeatureUpvoteScalarWhereWithAggregatesInput | FeatureUpvoteScalarWhereWithAggregatesInput[]
    OR?: FeatureUpvoteScalarWhereWithAggregatesInput[]
    NOT?: FeatureUpvoteScalarWhereWithAggregatesInput | FeatureUpvoteScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"FeatureUpvote"> | number
    featureRequestId?: IntWithAggregatesFilter<"FeatureUpvote"> | number
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    ownerId?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    featureRequestId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    featureRequest?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    type?: SortOrder
    owner?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    featureRequest?: FeatureRequestOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    ownerId?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    featureRequestId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    featureRequest?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    type?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    ownerId?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    featureRequestId?: IntWithAggregatesFilter<"Notification"> | number
    type?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type FeatureRequestMergeWhereInput = {
    AND?: FeatureRequestMergeWhereInput | FeatureRequestMergeWhereInput[]
    OR?: FeatureRequestMergeWhereInput[]
    NOT?: FeatureRequestMergeWhereInput | FeatureRequestMergeWhereInput[]
    id?: IntFilter<"FeatureRequestMerge"> | number
    mergedIntoId?: IntFilter<"FeatureRequestMerge"> | number
    mergedFromId?: IntFilter<"FeatureRequestMerge"> | number
    mergedInto?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
    mergedFrom?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
  }

  export type FeatureRequestMergeOrderByWithRelationInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
    mergedInto?: FeatureRequestOrderByWithRelationInput
    mergedFrom?: FeatureRequestOrderByWithRelationInput
  }

  export type FeatureRequestMergeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeatureRequestMergeWhereInput | FeatureRequestMergeWhereInput[]
    OR?: FeatureRequestMergeWhereInput[]
    NOT?: FeatureRequestMergeWhereInput | FeatureRequestMergeWhereInput[]
    mergedIntoId?: IntFilter<"FeatureRequestMerge"> | number
    mergedFromId?: IntFilter<"FeatureRequestMerge"> | number
    mergedInto?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
    mergedFrom?: XOR<FeatureRequestRelationFilter, FeatureRequestWhereInput>
  }, "id">

  export type FeatureRequestMergeOrderByWithAggregationInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
    _count?: FeatureRequestMergeCountOrderByAggregateInput
    _avg?: FeatureRequestMergeAvgOrderByAggregateInput
    _max?: FeatureRequestMergeMaxOrderByAggregateInput
    _min?: FeatureRequestMergeMinOrderByAggregateInput
    _sum?: FeatureRequestMergeSumOrderByAggregateInput
  }

  export type FeatureRequestMergeScalarWhereWithAggregatesInput = {
    AND?: FeatureRequestMergeScalarWhereWithAggregatesInput | FeatureRequestMergeScalarWhereWithAggregatesInput[]
    OR?: FeatureRequestMergeScalarWhereWithAggregatesInput[]
    NOT?: FeatureRequestMergeScalarWhereWithAggregatesInput | FeatureRequestMergeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeatureRequestMerge"> | number
    mergedIntoId?: IntWithAggregatesFilter<"FeatureRequestMerge"> | number
    mergedFromId?: IntWithAggregatesFilter<"FeatureRequestMerge"> | number
  }

  export type UserCreateInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationUncheckedCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUncheckedUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type CategoryCreateInput = {
    name: string
    featureRequests?: FeatureRequestCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    featureRequests?: FeatureRequestUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateInput = {
    name: string
    color?: string
    featureRequests?: FeatureRequestCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    name: string
    color?: string
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    featureRequests?: FeatureRequestUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusCreateManyInput = {
    id?: number
    name: string
    color?: string
  }

  export type StatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type FeatureRequestCreateInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestCreateManyInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
  }

  export type FeatureRequestUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    comment: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    featureRequest: FeatureRequestCreateNestedOneWithoutCommentsInput
    commentReplys?: CommentReplyCreateNestedManyWithoutComment_relationInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
    featureRequestId: number
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutComment_relationInput
  }

  export type CommentUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutCommentsNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutComment_relationNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutComment_relationNestedInput
  }

  export type CommentCreateManyInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
    featureRequestId: number
  }

  export type CommentUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentReplyCreateInput = {
    comment: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutCommentReplysInput
    comment_relation: CommentCreateNestedOneWithoutCommentReplysInput
  }

  export type CommentReplyUncheckedCreateInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
    commentId: number
  }

  export type CommentReplyUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentReplysNestedInput
    comment_relation?: CommentUpdateOneRequiredWithoutCommentReplysNestedInput
  }

  export type CommentReplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentReplyCreateManyInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
    commentId: number
  }

  export type CommentReplyUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentReplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureUpvoteCreateInput = {
    user: UserCreateNestedOneWithoutFeatureUpvotesInput
    featureRequest: FeatureRequestCreateNestedOneWithoutFeatureUpvotesInput
  }

  export type FeatureUpvoteUncheckedCreateInput = {
    userId: number
    featureRequestId: number
  }

  export type FeatureUpvoteUpdateInput = {
    user?: UserUpdateOneRequiredWithoutFeatureUpvotesNestedInput
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutFeatureUpvotesNestedInput
  }

  export type FeatureUpvoteUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureUpvoteCreateManyInput = {
    userId: number
    featureRequestId: number
  }

  export type FeatureUpvoteUpdateManyMutationInput = {

  }

  export type FeatureUpvoteUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    type: string
    owner: UserCreateNestedOneWithoutOwnerNotificationsInput
    user: UserCreateNestedOneWithoutUserNotificationsInput
    featureRequest: FeatureRequestCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    ownerId: number
    userId: number
    featureRequestId: number
    type: string
  }

  export type NotificationUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutOwnerNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutUserNotificationsNestedInput
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    ownerId: number
    userId: number
    featureRequestId: number
    type: string
  }

  export type NotificationUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type FeatureRequestMergeCreateInput = {
    mergedInto: FeatureRequestCreateNestedOneWithoutFeatureRequestMergeIntoInput
    mergedFrom: FeatureRequestCreateNestedOneWithoutFeatureRequestMergeFromInput
  }

  export type FeatureRequestMergeUncheckedCreateInput = {
    id?: number
    mergedIntoId: number
    mergedFromId: number
  }

  export type FeatureRequestMergeUpdateInput = {
    mergedInto?: FeatureRequestUpdateOneRequiredWithoutFeatureRequestMergeIntoNestedInput
    mergedFrom?: FeatureRequestUpdateOneRequiredWithoutFeatureRequestMergeFromNestedInput
  }

  export type FeatureRequestMergeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mergedIntoId?: IntFieldUpdateOperationsInput | number
    mergedFromId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureRequestMergeCreateManyInput = {
    id?: number
    mergedIntoId: number
    mergedFromId: number
  }

  export type FeatureRequestMergeUpdateManyMutationInput = {

  }

  export type FeatureRequestMergeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mergedIntoId?: IntFieldUpdateOperationsInput | number
    mergedFromId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type FeatureRequestListRelationFilter = {
    every?: FeatureRequestWhereInput
    some?: FeatureRequestWhereInput
    none?: FeatureRequestWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CommentReplyListRelationFilter = {
    every?: CommentReplyWhereInput
    some?: CommentReplyWhereInput
    none?: CommentReplyWhereInput
  }

  export type FeatureUpvoteListRelationFilter = {
    every?: FeatureUpvoteWhereInput
    some?: FeatureUpvoteWhereInput
    none?: FeatureUpvoteWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FeatureRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeatureUpvoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    avatarURL?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    avatarURL?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    avatarURL?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type StatusRelationFilter = {
    is?: StatusWhereInput
    isNot?: StatusWhereInput
  }

  export type FeatureRequestMergeListRelationFilter = {
    every?: FeatureRequestMergeWhereInput
    some?: FeatureRequestMergeWhereInput
    none?: FeatureRequestMergeWhereInput
  }

  export type FeatureRequestMergeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeatureRequestCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type FeatureRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type FeatureRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type FeatureRequestMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type FeatureRequestSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FeatureRequestRelationFilter = {
    is?: FeatureRequestWhereInput
    isNot?: FeatureRequestWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type CommentReplyCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentReplyAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentReplyMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    dateSubmitted?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentReplySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type FeatureUpvoteUserIdFeatureRequestIdCompoundUniqueInput = {
    userId: number
    featureRequestId: number
  }

  export type FeatureUpvoteCountOrderByAggregateInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type FeatureUpvoteAvgOrderByAggregateInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type FeatureUpvoteMaxOrderByAggregateInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type FeatureUpvoteMinOrderByAggregateInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type FeatureUpvoteSumOrderByAggregateInput = {
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    type?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    type?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
    type?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    featureRequestId?: SortOrder
  }

  export type FeatureRequestMergeCountOrderByAggregateInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
  }

  export type FeatureRequestMergeAvgOrderByAggregateInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
  }

  export type FeatureRequestMergeMaxOrderByAggregateInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
  }

  export type FeatureRequestMergeMinOrderByAggregateInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
  }

  export type FeatureRequestMergeSumOrderByAggregateInput = {
    id?: SortOrder
    mergedIntoId?: SortOrder
    mergedFromId?: SortOrder
  }

  export type FeatureRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureRequestCreateWithoutUserInput, FeatureRequestUncheckedCreateWithoutUserInput> | FeatureRequestCreateWithoutUserInput[] | FeatureRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutUserInput | FeatureRequestCreateOrConnectWithoutUserInput[]
    createMany?: FeatureRequestCreateManyUserInputEnvelope
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentReplyCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentReplyCreateWithoutUserInput, CommentReplyUncheckedCreateWithoutUserInput> | CommentReplyCreateWithoutUserInput[] | CommentReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutUserInput | CommentReplyCreateOrConnectWithoutUserInput[]
    createMany?: CommentReplyCreateManyUserInputEnvelope
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
  }

  export type FeatureUpvoteCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureUpvoteCreateWithoutUserInput, FeatureUpvoteUncheckedCreateWithoutUserInput> | FeatureUpvoteCreateWithoutUserInput[] | FeatureUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutUserInput | FeatureUpvoteCreateOrConnectWithoutUserInput[]
    createMany?: FeatureUpvoteCreateManyUserInputEnvelope
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutOwnerInput = {
    create?: XOR<NotificationCreateWithoutOwnerInput, NotificationUncheckedCreateWithoutOwnerInput> | NotificationCreateWithoutOwnerInput[] | NotificationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOwnerInput | NotificationCreateOrConnectWithoutOwnerInput[]
    createMany?: NotificationCreateManyOwnerInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FeatureRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureRequestCreateWithoutUserInput, FeatureRequestUncheckedCreateWithoutUserInput> | FeatureRequestCreateWithoutUserInput[] | FeatureRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutUserInput | FeatureRequestCreateOrConnectWithoutUserInput[]
    createMany?: FeatureRequestCreateManyUserInputEnvelope
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentReplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentReplyCreateWithoutUserInput, CommentReplyUncheckedCreateWithoutUserInput> | CommentReplyCreateWithoutUserInput[] | CommentReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutUserInput | CommentReplyCreateOrConnectWithoutUserInput[]
    createMany?: CommentReplyCreateManyUserInputEnvelope
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
  }

  export type FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureUpvoteCreateWithoutUserInput, FeatureUpvoteUncheckedCreateWithoutUserInput> | FeatureUpvoteCreateWithoutUserInput[] | FeatureUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutUserInput | FeatureUpvoteCreateOrConnectWithoutUserInput[]
    createMany?: FeatureUpvoteCreateManyUserInputEnvelope
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<NotificationCreateWithoutOwnerInput, NotificationUncheckedCreateWithoutOwnerInput> | NotificationCreateWithoutOwnerInput[] | NotificationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOwnerInput | NotificationCreateOrConnectWithoutOwnerInput[]
    createMany?: NotificationCreateManyOwnerInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type FeatureRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutUserInput, FeatureRequestUncheckedCreateWithoutUserInput> | FeatureRequestCreateWithoutUserInput[] | FeatureRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutUserInput | FeatureRequestCreateOrConnectWithoutUserInput[]
    upsert?: FeatureRequestUpsertWithWhereUniqueWithoutUserInput | FeatureRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureRequestCreateManyUserInputEnvelope
    set?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    disconnect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    delete?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    update?: FeatureRequestUpdateWithWhereUniqueWithoutUserInput | FeatureRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureRequestUpdateManyWithWhereWithoutUserInput | FeatureRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentReplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentReplyCreateWithoutUserInput, CommentReplyUncheckedCreateWithoutUserInput> | CommentReplyCreateWithoutUserInput[] | CommentReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutUserInput | CommentReplyCreateOrConnectWithoutUserInput[]
    upsert?: CommentReplyUpsertWithWhereUniqueWithoutUserInput | CommentReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentReplyCreateManyUserInputEnvelope
    set?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    disconnect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    delete?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    update?: CommentReplyUpdateWithWhereUniqueWithoutUserInput | CommentReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentReplyUpdateManyWithWhereWithoutUserInput | CommentReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentReplyScalarWhereInput | CommentReplyScalarWhereInput[]
  }

  export type FeatureUpvoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureUpvoteCreateWithoutUserInput, FeatureUpvoteUncheckedCreateWithoutUserInput> | FeatureUpvoteCreateWithoutUserInput[] | FeatureUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutUserInput | FeatureUpvoteCreateOrConnectWithoutUserInput[]
    upsert?: FeatureUpvoteUpsertWithWhereUniqueWithoutUserInput | FeatureUpvoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureUpvoteCreateManyUserInputEnvelope
    set?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    disconnect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    delete?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    update?: FeatureUpvoteUpdateWithWhereUniqueWithoutUserInput | FeatureUpvoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureUpvoteUpdateManyWithWhereWithoutUserInput | FeatureUpvoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureUpvoteScalarWhereInput | FeatureUpvoteScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<NotificationCreateWithoutOwnerInput, NotificationUncheckedCreateWithoutOwnerInput> | NotificationCreateWithoutOwnerInput[] | NotificationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOwnerInput | NotificationCreateOrConnectWithoutOwnerInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutOwnerInput | NotificationUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: NotificationCreateManyOwnerInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutOwnerInput | NotificationUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutOwnerInput | NotificationUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FeatureRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutUserInput, FeatureRequestUncheckedCreateWithoutUserInput> | FeatureRequestCreateWithoutUserInput[] | FeatureRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutUserInput | FeatureRequestCreateOrConnectWithoutUserInput[]
    upsert?: FeatureRequestUpsertWithWhereUniqueWithoutUserInput | FeatureRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureRequestCreateManyUserInputEnvelope
    set?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    disconnect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    delete?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    update?: FeatureRequestUpdateWithWhereUniqueWithoutUserInput | FeatureRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureRequestUpdateManyWithWhereWithoutUserInput | FeatureRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentReplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentReplyCreateWithoutUserInput, CommentReplyUncheckedCreateWithoutUserInput> | CommentReplyCreateWithoutUserInput[] | CommentReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutUserInput | CommentReplyCreateOrConnectWithoutUserInput[]
    upsert?: CommentReplyUpsertWithWhereUniqueWithoutUserInput | CommentReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentReplyCreateManyUserInputEnvelope
    set?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    disconnect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    delete?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    update?: CommentReplyUpdateWithWhereUniqueWithoutUserInput | CommentReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentReplyUpdateManyWithWhereWithoutUserInput | CommentReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentReplyScalarWhereInput | CommentReplyScalarWhereInput[]
  }

  export type FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureUpvoteCreateWithoutUserInput, FeatureUpvoteUncheckedCreateWithoutUserInput> | FeatureUpvoteCreateWithoutUserInput[] | FeatureUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutUserInput | FeatureUpvoteCreateOrConnectWithoutUserInput[]
    upsert?: FeatureUpvoteUpsertWithWhereUniqueWithoutUserInput | FeatureUpvoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureUpvoteCreateManyUserInputEnvelope
    set?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    disconnect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    delete?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    update?: FeatureUpvoteUpdateWithWhereUniqueWithoutUserInput | FeatureUpvoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureUpvoteUpdateManyWithWhereWithoutUserInput | FeatureUpvoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureUpvoteScalarWhereInput | FeatureUpvoteScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<NotificationCreateWithoutOwnerInput, NotificationUncheckedCreateWithoutOwnerInput> | NotificationCreateWithoutOwnerInput[] | NotificationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOwnerInput | NotificationCreateOrConnectWithoutOwnerInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutOwnerInput | NotificationUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: NotificationCreateManyOwnerInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutOwnerInput | NotificationUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutOwnerInput | NotificationUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FeatureRequestCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FeatureRequestCreateWithoutCategoryInput, FeatureRequestUncheckedCreateWithoutCategoryInput> | FeatureRequestCreateWithoutCategoryInput[] | FeatureRequestUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutCategoryInput | FeatureRequestCreateOrConnectWithoutCategoryInput[]
    createMany?: FeatureRequestCreateManyCategoryInputEnvelope
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
  }

  export type FeatureRequestUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FeatureRequestCreateWithoutCategoryInput, FeatureRequestUncheckedCreateWithoutCategoryInput> | FeatureRequestCreateWithoutCategoryInput[] | FeatureRequestUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutCategoryInput | FeatureRequestCreateOrConnectWithoutCategoryInput[]
    createMany?: FeatureRequestCreateManyCategoryInputEnvelope
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
  }

  export type FeatureRequestUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutCategoryInput, FeatureRequestUncheckedCreateWithoutCategoryInput> | FeatureRequestCreateWithoutCategoryInput[] | FeatureRequestUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutCategoryInput | FeatureRequestCreateOrConnectWithoutCategoryInput[]
    upsert?: FeatureRequestUpsertWithWhereUniqueWithoutCategoryInput | FeatureRequestUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FeatureRequestCreateManyCategoryInputEnvelope
    set?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    disconnect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    delete?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    update?: FeatureRequestUpdateWithWhereUniqueWithoutCategoryInput | FeatureRequestUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FeatureRequestUpdateManyWithWhereWithoutCategoryInput | FeatureRequestUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
  }

  export type FeatureRequestUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutCategoryInput, FeatureRequestUncheckedCreateWithoutCategoryInput> | FeatureRequestCreateWithoutCategoryInput[] | FeatureRequestUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutCategoryInput | FeatureRequestCreateOrConnectWithoutCategoryInput[]
    upsert?: FeatureRequestUpsertWithWhereUniqueWithoutCategoryInput | FeatureRequestUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FeatureRequestCreateManyCategoryInputEnvelope
    set?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    disconnect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    delete?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    update?: FeatureRequestUpdateWithWhereUniqueWithoutCategoryInput | FeatureRequestUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FeatureRequestUpdateManyWithWhereWithoutCategoryInput | FeatureRequestUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
  }

  export type FeatureRequestCreateNestedManyWithoutStatusInput = {
    create?: XOR<FeatureRequestCreateWithoutStatusInput, FeatureRequestUncheckedCreateWithoutStatusInput> | FeatureRequestCreateWithoutStatusInput[] | FeatureRequestUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutStatusInput | FeatureRequestCreateOrConnectWithoutStatusInput[]
    createMany?: FeatureRequestCreateManyStatusInputEnvelope
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
  }

  export type FeatureRequestUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<FeatureRequestCreateWithoutStatusInput, FeatureRequestUncheckedCreateWithoutStatusInput> | FeatureRequestCreateWithoutStatusInput[] | FeatureRequestUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutStatusInput | FeatureRequestCreateOrConnectWithoutStatusInput[]
    createMany?: FeatureRequestCreateManyStatusInputEnvelope
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
  }

  export type FeatureRequestUpdateManyWithoutStatusNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutStatusInput, FeatureRequestUncheckedCreateWithoutStatusInput> | FeatureRequestCreateWithoutStatusInput[] | FeatureRequestUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutStatusInput | FeatureRequestCreateOrConnectWithoutStatusInput[]
    upsert?: FeatureRequestUpsertWithWhereUniqueWithoutStatusInput | FeatureRequestUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: FeatureRequestCreateManyStatusInputEnvelope
    set?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    disconnect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    delete?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    update?: FeatureRequestUpdateWithWhereUniqueWithoutStatusInput | FeatureRequestUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: FeatureRequestUpdateManyWithWhereWithoutStatusInput | FeatureRequestUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
  }

  export type FeatureRequestUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutStatusInput, FeatureRequestUncheckedCreateWithoutStatusInput> | FeatureRequestCreateWithoutStatusInput[] | FeatureRequestUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutStatusInput | FeatureRequestCreateOrConnectWithoutStatusInput[]
    upsert?: FeatureRequestUpsertWithWhereUniqueWithoutStatusInput | FeatureRequestUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: FeatureRequestCreateManyStatusInputEnvelope
    set?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    disconnect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    delete?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    connect?: FeatureRequestWhereUniqueInput | FeatureRequestWhereUniqueInput[]
    update?: FeatureRequestUpdateWithWhereUniqueWithoutStatusInput | FeatureRequestUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: FeatureRequestUpdateManyWithWhereWithoutStatusInput | FeatureRequestUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFeatureRequestsInput = {
    create?: XOR<UserCreateWithoutFeatureRequestsInput, UserUncheckedCreateWithoutFeatureRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutFeatureRequestsInput = {
    create?: XOR<CategoryCreateWithoutFeatureRequestsInput, CategoryUncheckedCreateWithoutFeatureRequestsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFeatureRequestsInput
    connect?: CategoryWhereUniqueInput
  }

  export type StatusCreateNestedOneWithoutFeatureRequestsInput = {
    create?: XOR<StatusCreateWithoutFeatureRequestsInput, StatusUncheckedCreateWithoutFeatureRequestsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutFeatureRequestsInput
    connect?: StatusWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutFeatureRequestInput = {
    create?: XOR<CommentCreateWithoutFeatureRequestInput, CommentUncheckedCreateWithoutFeatureRequestInput> | CommentCreateWithoutFeatureRequestInput[] | CommentUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFeatureRequestInput | CommentCreateOrConnectWithoutFeatureRequestInput[]
    createMany?: CommentCreateManyFeatureRequestInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput = {
    create?: XOR<FeatureUpvoteCreateWithoutFeatureRequestInput, FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput> | FeatureUpvoteCreateWithoutFeatureRequestInput[] | FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput | FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput[]
    createMany?: FeatureUpvoteCreateManyFeatureRequestInputEnvelope
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutFeatureRequestInput = {
    create?: XOR<NotificationCreateWithoutFeatureRequestInput, NotificationUncheckedCreateWithoutFeatureRequestInput> | NotificationCreateWithoutFeatureRequestInput[] | NotificationUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFeatureRequestInput | NotificationCreateOrConnectWithoutFeatureRequestInput[]
    createMany?: NotificationCreateManyFeatureRequestInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FeatureRequestMergeCreateNestedManyWithoutMergedFromInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedFromInput, FeatureRequestMergeUncheckedCreateWithoutMergedFromInput> | FeatureRequestMergeCreateWithoutMergedFromInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedFromInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedFromInput | FeatureRequestMergeCreateOrConnectWithoutMergedFromInput[]
    createMany?: FeatureRequestMergeCreateManyMergedFromInputEnvelope
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
  }

  export type FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedIntoInput, FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput> | FeatureRequestMergeCreateWithoutMergedIntoInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput | FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput[]
    createMany?: FeatureRequestMergeCreateManyMergedIntoInputEnvelope
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutFeatureRequestInput = {
    create?: XOR<CommentCreateWithoutFeatureRequestInput, CommentUncheckedCreateWithoutFeatureRequestInput> | CommentCreateWithoutFeatureRequestInput[] | CommentUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFeatureRequestInput | CommentCreateOrConnectWithoutFeatureRequestInput[]
    createMany?: CommentCreateManyFeatureRequestInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput = {
    create?: XOR<FeatureUpvoteCreateWithoutFeatureRequestInput, FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput> | FeatureUpvoteCreateWithoutFeatureRequestInput[] | FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput | FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput[]
    createMany?: FeatureUpvoteCreateManyFeatureRequestInputEnvelope
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput = {
    create?: XOR<NotificationCreateWithoutFeatureRequestInput, NotificationUncheckedCreateWithoutFeatureRequestInput> | NotificationCreateWithoutFeatureRequestInput[] | NotificationUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFeatureRequestInput | NotificationCreateOrConnectWithoutFeatureRequestInput[]
    createMany?: NotificationCreateManyFeatureRequestInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedFromInput, FeatureRequestMergeUncheckedCreateWithoutMergedFromInput> | FeatureRequestMergeCreateWithoutMergedFromInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedFromInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedFromInput | FeatureRequestMergeCreateOrConnectWithoutMergedFromInput[]
    createMany?: FeatureRequestMergeCreateManyMergedFromInputEnvelope
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
  }

  export type FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedIntoInput, FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput> | FeatureRequestMergeCreateWithoutMergedIntoInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput | FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput[]
    createMany?: FeatureRequestMergeCreateManyMergedIntoInputEnvelope
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutFeatureRequestsNestedInput = {
    create?: XOR<UserCreateWithoutFeatureRequestsInput, UserUncheckedCreateWithoutFeatureRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureRequestsInput
    upsert?: UserUpsertWithoutFeatureRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeatureRequestsInput, UserUpdateWithoutFeatureRequestsInput>, UserUncheckedUpdateWithoutFeatureRequestsInput>
  }

  export type CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput = {
    create?: XOR<CategoryCreateWithoutFeatureRequestsInput, CategoryUncheckedCreateWithoutFeatureRequestsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFeatureRequestsInput
    upsert?: CategoryUpsertWithoutFeatureRequestsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutFeatureRequestsInput, CategoryUpdateWithoutFeatureRequestsInput>, CategoryUncheckedUpdateWithoutFeatureRequestsInput>
  }

  export type StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput = {
    create?: XOR<StatusCreateWithoutFeatureRequestsInput, StatusUncheckedCreateWithoutFeatureRequestsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutFeatureRequestsInput
    upsert?: StatusUpsertWithoutFeatureRequestsInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutFeatureRequestsInput, StatusUpdateWithoutFeatureRequestsInput>, StatusUncheckedUpdateWithoutFeatureRequestsInput>
  }

  export type CommentUpdateManyWithoutFeatureRequestNestedInput = {
    create?: XOR<CommentCreateWithoutFeatureRequestInput, CommentUncheckedCreateWithoutFeatureRequestInput> | CommentCreateWithoutFeatureRequestInput[] | CommentUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFeatureRequestInput | CommentCreateOrConnectWithoutFeatureRequestInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFeatureRequestInput | CommentUpsertWithWhereUniqueWithoutFeatureRequestInput[]
    createMany?: CommentCreateManyFeatureRequestInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFeatureRequestInput | CommentUpdateWithWhereUniqueWithoutFeatureRequestInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFeatureRequestInput | CommentUpdateManyWithWhereWithoutFeatureRequestInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput = {
    create?: XOR<FeatureUpvoteCreateWithoutFeatureRequestInput, FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput> | FeatureUpvoteCreateWithoutFeatureRequestInput[] | FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput | FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput[]
    upsert?: FeatureUpvoteUpsertWithWhereUniqueWithoutFeatureRequestInput | FeatureUpvoteUpsertWithWhereUniqueWithoutFeatureRequestInput[]
    createMany?: FeatureUpvoteCreateManyFeatureRequestInputEnvelope
    set?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    disconnect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    delete?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    update?: FeatureUpvoteUpdateWithWhereUniqueWithoutFeatureRequestInput | FeatureUpvoteUpdateWithWhereUniqueWithoutFeatureRequestInput[]
    updateMany?: FeatureUpvoteUpdateManyWithWhereWithoutFeatureRequestInput | FeatureUpvoteUpdateManyWithWhereWithoutFeatureRequestInput[]
    deleteMany?: FeatureUpvoteScalarWhereInput | FeatureUpvoteScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutFeatureRequestNestedInput = {
    create?: XOR<NotificationCreateWithoutFeatureRequestInput, NotificationUncheckedCreateWithoutFeatureRequestInput> | NotificationCreateWithoutFeatureRequestInput[] | NotificationUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFeatureRequestInput | NotificationCreateOrConnectWithoutFeatureRequestInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutFeatureRequestInput | NotificationUpsertWithWhereUniqueWithoutFeatureRequestInput[]
    createMany?: NotificationCreateManyFeatureRequestInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutFeatureRequestInput | NotificationUpdateWithWhereUniqueWithoutFeatureRequestInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutFeatureRequestInput | NotificationUpdateManyWithWhereWithoutFeatureRequestInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedFromInput, FeatureRequestMergeUncheckedCreateWithoutMergedFromInput> | FeatureRequestMergeCreateWithoutMergedFromInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedFromInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedFromInput | FeatureRequestMergeCreateOrConnectWithoutMergedFromInput[]
    upsert?: FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedFromInput | FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedFromInput[]
    createMany?: FeatureRequestMergeCreateManyMergedFromInputEnvelope
    set?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    disconnect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    delete?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    update?: FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedFromInput | FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedFromInput[]
    updateMany?: FeatureRequestMergeUpdateManyWithWhereWithoutMergedFromInput | FeatureRequestMergeUpdateManyWithWhereWithoutMergedFromInput[]
    deleteMany?: FeatureRequestMergeScalarWhereInput | FeatureRequestMergeScalarWhereInput[]
  }

  export type FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedIntoInput, FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput> | FeatureRequestMergeCreateWithoutMergedIntoInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput | FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput[]
    upsert?: FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedIntoInput | FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedIntoInput[]
    createMany?: FeatureRequestMergeCreateManyMergedIntoInputEnvelope
    set?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    disconnect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    delete?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    update?: FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedIntoInput | FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedIntoInput[]
    updateMany?: FeatureRequestMergeUpdateManyWithWhereWithoutMergedIntoInput | FeatureRequestMergeUpdateManyWithWhereWithoutMergedIntoInput[]
    deleteMany?: FeatureRequestMergeScalarWhereInput | FeatureRequestMergeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput = {
    create?: XOR<CommentCreateWithoutFeatureRequestInput, CommentUncheckedCreateWithoutFeatureRequestInput> | CommentCreateWithoutFeatureRequestInput[] | CommentUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFeatureRequestInput | CommentCreateOrConnectWithoutFeatureRequestInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFeatureRequestInput | CommentUpsertWithWhereUniqueWithoutFeatureRequestInput[]
    createMany?: CommentCreateManyFeatureRequestInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFeatureRequestInput | CommentUpdateWithWhereUniqueWithoutFeatureRequestInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFeatureRequestInput | CommentUpdateManyWithWhereWithoutFeatureRequestInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput = {
    create?: XOR<FeatureUpvoteCreateWithoutFeatureRequestInput, FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput> | FeatureUpvoteCreateWithoutFeatureRequestInput[] | FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput | FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput[]
    upsert?: FeatureUpvoteUpsertWithWhereUniqueWithoutFeatureRequestInput | FeatureUpvoteUpsertWithWhereUniqueWithoutFeatureRequestInput[]
    createMany?: FeatureUpvoteCreateManyFeatureRequestInputEnvelope
    set?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    disconnect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    delete?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    connect?: FeatureUpvoteWhereUniqueInput | FeatureUpvoteWhereUniqueInput[]
    update?: FeatureUpvoteUpdateWithWhereUniqueWithoutFeatureRequestInput | FeatureUpvoteUpdateWithWhereUniqueWithoutFeatureRequestInput[]
    updateMany?: FeatureUpvoteUpdateManyWithWhereWithoutFeatureRequestInput | FeatureUpvoteUpdateManyWithWhereWithoutFeatureRequestInput[]
    deleteMany?: FeatureUpvoteScalarWhereInput | FeatureUpvoteScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput = {
    create?: XOR<NotificationCreateWithoutFeatureRequestInput, NotificationUncheckedCreateWithoutFeatureRequestInput> | NotificationCreateWithoutFeatureRequestInput[] | NotificationUncheckedCreateWithoutFeatureRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFeatureRequestInput | NotificationCreateOrConnectWithoutFeatureRequestInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutFeatureRequestInput | NotificationUpsertWithWhereUniqueWithoutFeatureRequestInput[]
    createMany?: NotificationCreateManyFeatureRequestInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutFeatureRequestInput | NotificationUpdateWithWhereUniqueWithoutFeatureRequestInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutFeatureRequestInput | NotificationUpdateManyWithWhereWithoutFeatureRequestInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedFromInput, FeatureRequestMergeUncheckedCreateWithoutMergedFromInput> | FeatureRequestMergeCreateWithoutMergedFromInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedFromInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedFromInput | FeatureRequestMergeCreateOrConnectWithoutMergedFromInput[]
    upsert?: FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedFromInput | FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedFromInput[]
    createMany?: FeatureRequestMergeCreateManyMergedFromInputEnvelope
    set?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    disconnect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    delete?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    update?: FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedFromInput | FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedFromInput[]
    updateMany?: FeatureRequestMergeUpdateManyWithWhereWithoutMergedFromInput | FeatureRequestMergeUpdateManyWithWhereWithoutMergedFromInput[]
    deleteMany?: FeatureRequestMergeScalarWhereInput | FeatureRequestMergeScalarWhereInput[]
  }

  export type FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput = {
    create?: XOR<FeatureRequestMergeCreateWithoutMergedIntoInput, FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput> | FeatureRequestMergeCreateWithoutMergedIntoInput[] | FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput[]
    connectOrCreate?: FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput | FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput[]
    upsert?: FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedIntoInput | FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedIntoInput[]
    createMany?: FeatureRequestMergeCreateManyMergedIntoInputEnvelope
    set?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    disconnect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    delete?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    connect?: FeatureRequestMergeWhereUniqueInput | FeatureRequestMergeWhereUniqueInput[]
    update?: FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedIntoInput | FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedIntoInput[]
    updateMany?: FeatureRequestMergeUpdateManyWithWhereWithoutMergedIntoInput | FeatureRequestMergeUpdateManyWithWhereWithoutMergedIntoInput[]
    deleteMany?: FeatureRequestMergeScalarWhereInput | FeatureRequestMergeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type FeatureRequestCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FeatureRequestCreateWithoutCommentsInput, FeatureRequestUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutCommentsInput
    connect?: FeatureRequestWhereUniqueInput
  }

  export type CommentReplyCreateNestedManyWithoutComment_relationInput = {
    create?: XOR<CommentReplyCreateWithoutComment_relationInput, CommentReplyUncheckedCreateWithoutComment_relationInput> | CommentReplyCreateWithoutComment_relationInput[] | CommentReplyUncheckedCreateWithoutComment_relationInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutComment_relationInput | CommentReplyCreateOrConnectWithoutComment_relationInput[]
    createMany?: CommentReplyCreateManyComment_relationInputEnvelope
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
  }

  export type CommentReplyUncheckedCreateNestedManyWithoutComment_relationInput = {
    create?: XOR<CommentReplyCreateWithoutComment_relationInput, CommentReplyUncheckedCreateWithoutComment_relationInput> | CommentReplyCreateWithoutComment_relationInput[] | CommentReplyUncheckedCreateWithoutComment_relationInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutComment_relationInput | CommentReplyCreateOrConnectWithoutComment_relationInput[]
    createMany?: CommentReplyCreateManyComment_relationInputEnvelope
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type FeatureRequestUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutCommentsInput, FeatureRequestUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutCommentsInput
    upsert?: FeatureRequestUpsertWithoutCommentsInput
    connect?: FeatureRequestWhereUniqueInput
    update?: XOR<XOR<FeatureRequestUpdateToOneWithWhereWithoutCommentsInput, FeatureRequestUpdateWithoutCommentsInput>, FeatureRequestUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentReplyUpdateManyWithoutComment_relationNestedInput = {
    create?: XOR<CommentReplyCreateWithoutComment_relationInput, CommentReplyUncheckedCreateWithoutComment_relationInput> | CommentReplyCreateWithoutComment_relationInput[] | CommentReplyUncheckedCreateWithoutComment_relationInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutComment_relationInput | CommentReplyCreateOrConnectWithoutComment_relationInput[]
    upsert?: CommentReplyUpsertWithWhereUniqueWithoutComment_relationInput | CommentReplyUpsertWithWhereUniqueWithoutComment_relationInput[]
    createMany?: CommentReplyCreateManyComment_relationInputEnvelope
    set?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    disconnect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    delete?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    update?: CommentReplyUpdateWithWhereUniqueWithoutComment_relationInput | CommentReplyUpdateWithWhereUniqueWithoutComment_relationInput[]
    updateMany?: CommentReplyUpdateManyWithWhereWithoutComment_relationInput | CommentReplyUpdateManyWithWhereWithoutComment_relationInput[]
    deleteMany?: CommentReplyScalarWhereInput | CommentReplyScalarWhereInput[]
  }

  export type CommentReplyUncheckedUpdateManyWithoutComment_relationNestedInput = {
    create?: XOR<CommentReplyCreateWithoutComment_relationInput, CommentReplyUncheckedCreateWithoutComment_relationInput> | CommentReplyCreateWithoutComment_relationInput[] | CommentReplyUncheckedCreateWithoutComment_relationInput[]
    connectOrCreate?: CommentReplyCreateOrConnectWithoutComment_relationInput | CommentReplyCreateOrConnectWithoutComment_relationInput[]
    upsert?: CommentReplyUpsertWithWhereUniqueWithoutComment_relationInput | CommentReplyUpsertWithWhereUniqueWithoutComment_relationInput[]
    createMany?: CommentReplyCreateManyComment_relationInputEnvelope
    set?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    disconnect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    delete?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    connect?: CommentReplyWhereUniqueInput | CommentReplyWhereUniqueInput[]
    update?: CommentReplyUpdateWithWhereUniqueWithoutComment_relationInput | CommentReplyUpdateWithWhereUniqueWithoutComment_relationInput[]
    updateMany?: CommentReplyUpdateManyWithWhereWithoutComment_relationInput | CommentReplyUpdateManyWithWhereWithoutComment_relationInput[]
    deleteMany?: CommentReplyScalarWhereInput | CommentReplyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentReplysInput = {
    create?: XOR<UserCreateWithoutCommentReplysInput, UserUncheckedCreateWithoutCommentReplysInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentReplysInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutCommentReplysInput = {
    create?: XOR<CommentCreateWithoutCommentReplysInput, CommentUncheckedCreateWithoutCommentReplysInput>
    connectOrCreate?: CommentCreateOrConnectWithoutCommentReplysInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentReplysNestedInput = {
    create?: XOR<UserCreateWithoutCommentReplysInput, UserUncheckedCreateWithoutCommentReplysInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentReplysInput
    upsert?: UserUpsertWithoutCommentReplysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentReplysInput, UserUpdateWithoutCommentReplysInput>, UserUncheckedUpdateWithoutCommentReplysInput>
  }

  export type CommentUpdateOneRequiredWithoutCommentReplysNestedInput = {
    create?: XOR<CommentCreateWithoutCommentReplysInput, CommentUncheckedCreateWithoutCommentReplysInput>
    connectOrCreate?: CommentCreateOrConnectWithoutCommentReplysInput
    upsert?: CommentUpsertWithoutCommentReplysInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutCommentReplysInput, CommentUpdateWithoutCommentReplysInput>, CommentUncheckedUpdateWithoutCommentReplysInput>
  }

  export type UserCreateNestedOneWithoutFeatureUpvotesInput = {
    create?: XOR<UserCreateWithoutFeatureUpvotesInput, UserUncheckedCreateWithoutFeatureUpvotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureUpvotesInput
    connect?: UserWhereUniqueInput
  }

  export type FeatureRequestCreateNestedOneWithoutFeatureUpvotesInput = {
    create?: XOR<FeatureRequestCreateWithoutFeatureUpvotesInput, FeatureRequestUncheckedCreateWithoutFeatureUpvotesInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutFeatureUpvotesInput
    connect?: FeatureRequestWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeatureUpvotesNestedInput = {
    create?: XOR<UserCreateWithoutFeatureUpvotesInput, UserUncheckedCreateWithoutFeatureUpvotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureUpvotesInput
    upsert?: UserUpsertWithoutFeatureUpvotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeatureUpvotesInput, UserUpdateWithoutFeatureUpvotesInput>, UserUncheckedUpdateWithoutFeatureUpvotesInput>
  }

  export type FeatureRequestUpdateOneRequiredWithoutFeatureUpvotesNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutFeatureUpvotesInput, FeatureRequestUncheckedCreateWithoutFeatureUpvotesInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutFeatureUpvotesInput
    upsert?: FeatureRequestUpsertWithoutFeatureUpvotesInput
    connect?: FeatureRequestWhereUniqueInput
    update?: XOR<XOR<FeatureRequestUpdateToOneWithWhereWithoutFeatureUpvotesInput, FeatureRequestUpdateWithoutFeatureUpvotesInput>, FeatureRequestUncheckedUpdateWithoutFeatureUpvotesInput>
  }

  export type UserCreateNestedOneWithoutOwnerNotificationsInput = {
    create?: XOR<UserCreateWithoutOwnerNotificationsInput, UserUncheckedCreateWithoutOwnerNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnerNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserNotificationsInput = {
    create?: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type FeatureRequestCreateNestedOneWithoutNotificationInput = {
    create?: XOR<FeatureRequestCreateWithoutNotificationInput, FeatureRequestUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutNotificationInput
    connect?: FeatureRequestWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOwnerNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutOwnerNotificationsInput, UserUncheckedCreateWithoutOwnerNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnerNotificationsInput
    upsert?: UserUpsertWithoutOwnerNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnerNotificationsInput, UserUpdateWithoutOwnerNotificationsInput>, UserUncheckedUpdateWithoutOwnerNotificationsInput>
  }

  export type UserUpdateOneRequiredWithoutUserNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserNotificationsInput
    upsert?: UserUpsertWithoutUserNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserNotificationsInput, UserUpdateWithoutUserNotificationsInput>, UserUncheckedUpdateWithoutUserNotificationsInput>
  }

  export type FeatureRequestUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutNotificationInput, FeatureRequestUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutNotificationInput
    upsert?: FeatureRequestUpsertWithoutNotificationInput
    connect?: FeatureRequestWhereUniqueInput
    update?: XOR<XOR<FeatureRequestUpdateToOneWithWhereWithoutNotificationInput, FeatureRequestUpdateWithoutNotificationInput>, FeatureRequestUncheckedUpdateWithoutNotificationInput>
  }

  export type FeatureRequestCreateNestedOneWithoutFeatureRequestMergeIntoInput = {
    create?: XOR<FeatureRequestCreateWithoutFeatureRequestMergeIntoInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeIntoInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutFeatureRequestMergeIntoInput
    connect?: FeatureRequestWhereUniqueInput
  }

  export type FeatureRequestCreateNestedOneWithoutFeatureRequestMergeFromInput = {
    create?: XOR<FeatureRequestCreateWithoutFeatureRequestMergeFromInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeFromInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutFeatureRequestMergeFromInput
    connect?: FeatureRequestWhereUniqueInput
  }

  export type FeatureRequestUpdateOneRequiredWithoutFeatureRequestMergeIntoNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutFeatureRequestMergeIntoInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeIntoInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutFeatureRequestMergeIntoInput
    upsert?: FeatureRequestUpsertWithoutFeatureRequestMergeIntoInput
    connect?: FeatureRequestWhereUniqueInput
    update?: XOR<XOR<FeatureRequestUpdateToOneWithWhereWithoutFeatureRequestMergeIntoInput, FeatureRequestUpdateWithoutFeatureRequestMergeIntoInput>, FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeIntoInput>
  }

  export type FeatureRequestUpdateOneRequiredWithoutFeatureRequestMergeFromNestedInput = {
    create?: XOR<FeatureRequestCreateWithoutFeatureRequestMergeFromInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeFromInput>
    connectOrCreate?: FeatureRequestCreateOrConnectWithoutFeatureRequestMergeFromInput
    upsert?: FeatureRequestUpsertWithoutFeatureRequestMergeFromInput
    connect?: FeatureRequestWhereUniqueInput
    update?: XOR<XOR<FeatureRequestUpdateToOneWithWhereWithoutFeatureRequestMergeFromInput, FeatureRequestUpdateWithoutFeatureRequestMergeFromInput>, FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeFromInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FeatureRequestCreateWithoutUserInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    categoryId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutUserInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutUserInput, FeatureRequestUncheckedCreateWithoutUserInput>
  }

  export type FeatureRequestCreateManyUserInputEnvelope = {
    data: FeatureRequestCreateManyUserInput | FeatureRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    comment: string
    dateSubmitted?: Date | string
    featureRequest: FeatureRequestCreateNestedOneWithoutCommentsInput
    commentReplys?: CommentReplyCreateNestedManyWithoutComment_relationInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    featureRequestId: number
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutComment_relationInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentReplyCreateWithoutUserInput = {
    comment: string
    dateSubmitted?: Date | string
    comment_relation: CommentCreateNestedOneWithoutCommentReplysInput
  }

  export type CommentReplyUncheckedCreateWithoutUserInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    commentId: number
  }

  export type CommentReplyCreateOrConnectWithoutUserInput = {
    where: CommentReplyWhereUniqueInput
    create: XOR<CommentReplyCreateWithoutUserInput, CommentReplyUncheckedCreateWithoutUserInput>
  }

  export type CommentReplyCreateManyUserInputEnvelope = {
    data: CommentReplyCreateManyUserInput | CommentReplyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeatureUpvoteCreateWithoutUserInput = {
    featureRequest: FeatureRequestCreateNestedOneWithoutFeatureUpvotesInput
  }

  export type FeatureUpvoteUncheckedCreateWithoutUserInput = {
    featureRequestId: number
  }

  export type FeatureUpvoteCreateOrConnectWithoutUserInput = {
    where: FeatureUpvoteWhereUniqueInput
    create: XOR<FeatureUpvoteCreateWithoutUserInput, FeatureUpvoteUncheckedCreateWithoutUserInput>
  }

  export type FeatureUpvoteCreateManyUserInputEnvelope = {
    data: FeatureUpvoteCreateManyUserInput | FeatureUpvoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutOwnerInput = {
    type: string
    user: UserCreateNestedOneWithoutUserNotificationsInput
    featureRequest: FeatureRequestCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutOwnerInput = {
    id?: number
    userId: number
    featureRequestId: number
    type: string
  }

  export type NotificationCreateOrConnectWithoutOwnerInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutOwnerInput, NotificationUncheckedCreateWithoutOwnerInput>
  }

  export type NotificationCreateManyOwnerInputEnvelope = {
    data: NotificationCreateManyOwnerInput | NotificationCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    type: string
    owner: UserCreateNestedOneWithoutOwnerNotificationsInput
    featureRequest: FeatureRequestCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    ownerId: number
    featureRequestId: number
    type: string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeatureRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: FeatureRequestWhereUniqueInput
    update: XOR<FeatureRequestUpdateWithoutUserInput, FeatureRequestUncheckedUpdateWithoutUserInput>
    create: XOR<FeatureRequestCreateWithoutUserInput, FeatureRequestUncheckedCreateWithoutUserInput>
  }

  export type FeatureRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: FeatureRequestWhereUniqueInput
    data: XOR<FeatureRequestUpdateWithoutUserInput, FeatureRequestUncheckedUpdateWithoutUserInput>
  }

  export type FeatureRequestUpdateManyWithWhereWithoutUserInput = {
    where: FeatureRequestScalarWhereInput
    data: XOR<FeatureRequestUpdateManyMutationInput, FeatureRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type FeatureRequestScalarWhereInput = {
    AND?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
    OR?: FeatureRequestScalarWhereInput[]
    NOT?: FeatureRequestScalarWhereInput | FeatureRequestScalarWhereInput[]
    id?: IntFilter<"FeatureRequest"> | number
    title?: StringFilter<"FeatureRequest"> | string
    description?: StringFilter<"FeatureRequest"> | string
    dateSubmitted?: DateTimeFilter<"FeatureRequest"> | Date | string
    userId?: IntFilter<"FeatureRequest"> | number
    categoryId?: IntFilter<"FeatureRequest"> | number
    statusId?: IntFilter<"FeatureRequest"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    dateSubmitted?: DateTimeFilter<"Comment"> | Date | string
    userId?: IntFilter<"Comment"> | number
    featureRequestId?: IntFilter<"Comment"> | number
  }

  export type CommentReplyUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentReplyWhereUniqueInput
    update: XOR<CommentReplyUpdateWithoutUserInput, CommentReplyUncheckedUpdateWithoutUserInput>
    create: XOR<CommentReplyCreateWithoutUserInput, CommentReplyUncheckedCreateWithoutUserInput>
  }

  export type CommentReplyUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentReplyWhereUniqueInput
    data: XOR<CommentReplyUpdateWithoutUserInput, CommentReplyUncheckedUpdateWithoutUserInput>
  }

  export type CommentReplyUpdateManyWithWhereWithoutUserInput = {
    where: CommentReplyScalarWhereInput
    data: XOR<CommentReplyUpdateManyMutationInput, CommentReplyUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentReplyScalarWhereInput = {
    AND?: CommentReplyScalarWhereInput | CommentReplyScalarWhereInput[]
    OR?: CommentReplyScalarWhereInput[]
    NOT?: CommentReplyScalarWhereInput | CommentReplyScalarWhereInput[]
    id?: IntFilter<"CommentReply"> | number
    comment?: StringFilter<"CommentReply"> | string
    dateSubmitted?: DateTimeFilter<"CommentReply"> | Date | string
    userId?: IntFilter<"CommentReply"> | number
    commentId?: IntFilter<"CommentReply"> | number
  }

  export type FeatureUpvoteUpsertWithWhereUniqueWithoutUserInput = {
    where: FeatureUpvoteWhereUniqueInput
    update: XOR<FeatureUpvoteUpdateWithoutUserInput, FeatureUpvoteUncheckedUpdateWithoutUserInput>
    create: XOR<FeatureUpvoteCreateWithoutUserInput, FeatureUpvoteUncheckedCreateWithoutUserInput>
  }

  export type FeatureUpvoteUpdateWithWhereUniqueWithoutUserInput = {
    where: FeatureUpvoteWhereUniqueInput
    data: XOR<FeatureUpvoteUpdateWithoutUserInput, FeatureUpvoteUncheckedUpdateWithoutUserInput>
  }

  export type FeatureUpvoteUpdateManyWithWhereWithoutUserInput = {
    where: FeatureUpvoteScalarWhereInput
    data: XOR<FeatureUpvoteUpdateManyMutationInput, FeatureUpvoteUncheckedUpdateManyWithoutUserInput>
  }

  export type FeatureUpvoteScalarWhereInput = {
    AND?: FeatureUpvoteScalarWhereInput | FeatureUpvoteScalarWhereInput[]
    OR?: FeatureUpvoteScalarWhereInput[]
    NOT?: FeatureUpvoteScalarWhereInput | FeatureUpvoteScalarWhereInput[]
    userId?: IntFilter<"FeatureUpvote"> | number
    featureRequestId?: IntFilter<"FeatureUpvote"> | number
  }

  export type NotificationUpsertWithWhereUniqueWithoutOwnerInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutOwnerInput, NotificationUncheckedUpdateWithoutOwnerInput>
    create: XOR<NotificationCreateWithoutOwnerInput, NotificationUncheckedCreateWithoutOwnerInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutOwnerInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutOwnerInput, NotificationUncheckedUpdateWithoutOwnerInput>
  }

  export type NotificationUpdateManyWithWhereWithoutOwnerInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutOwnerInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    ownerId?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    featureRequestId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type FeatureRequestCreateWithoutCategoryInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutCategoryInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutCategoryInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutCategoryInput, FeatureRequestUncheckedCreateWithoutCategoryInput>
  }

  export type FeatureRequestCreateManyCategoryInputEnvelope = {
    data: FeatureRequestCreateManyCategoryInput | FeatureRequestCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type FeatureRequestUpsertWithWhereUniqueWithoutCategoryInput = {
    where: FeatureRequestWhereUniqueInput
    update: XOR<FeatureRequestUpdateWithoutCategoryInput, FeatureRequestUncheckedUpdateWithoutCategoryInput>
    create: XOR<FeatureRequestCreateWithoutCategoryInput, FeatureRequestUncheckedCreateWithoutCategoryInput>
  }

  export type FeatureRequestUpdateWithWhereUniqueWithoutCategoryInput = {
    where: FeatureRequestWhereUniqueInput
    data: XOR<FeatureRequestUpdateWithoutCategoryInput, FeatureRequestUncheckedUpdateWithoutCategoryInput>
  }

  export type FeatureRequestUpdateManyWithWhereWithoutCategoryInput = {
    where: FeatureRequestScalarWhereInput
    data: XOR<FeatureRequestUpdateManyMutationInput, FeatureRequestUncheckedUpdateManyWithoutCategoryInput>
  }

  export type FeatureRequestCreateWithoutStatusInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutStatusInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutStatusInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutStatusInput, FeatureRequestUncheckedCreateWithoutStatusInput>
  }

  export type FeatureRequestCreateManyStatusInputEnvelope = {
    data: FeatureRequestCreateManyStatusInput | FeatureRequestCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type FeatureRequestUpsertWithWhereUniqueWithoutStatusInput = {
    where: FeatureRequestWhereUniqueInput
    update: XOR<FeatureRequestUpdateWithoutStatusInput, FeatureRequestUncheckedUpdateWithoutStatusInput>
    create: XOR<FeatureRequestCreateWithoutStatusInput, FeatureRequestUncheckedCreateWithoutStatusInput>
  }

  export type FeatureRequestUpdateWithWhereUniqueWithoutStatusInput = {
    where: FeatureRequestWhereUniqueInput
    data: XOR<FeatureRequestUpdateWithoutStatusInput, FeatureRequestUncheckedUpdateWithoutStatusInput>
  }

  export type FeatureRequestUpdateManyWithWhereWithoutStatusInput = {
    where: FeatureRequestScalarWhereInput
    data: XOR<FeatureRequestUpdateManyMutationInput, FeatureRequestUncheckedUpdateManyWithoutStatusInput>
  }

  export type UserCreateWithoutFeatureRequestsInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    comments?: CommentCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeatureRequestsInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationUncheckedCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeatureRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeatureRequestsInput, UserUncheckedCreateWithoutFeatureRequestsInput>
  }

  export type CategoryCreateWithoutFeatureRequestsInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutFeatureRequestsInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutFeatureRequestsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutFeatureRequestsInput, CategoryUncheckedCreateWithoutFeatureRequestsInput>
  }

  export type StatusCreateWithoutFeatureRequestsInput = {
    name: string
    color?: string
  }

  export type StatusUncheckedCreateWithoutFeatureRequestsInput = {
    id?: number
    name: string
    color?: string
  }

  export type StatusCreateOrConnectWithoutFeatureRequestsInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutFeatureRequestsInput, StatusUncheckedCreateWithoutFeatureRequestsInput>
  }

  export type CommentCreateWithoutFeatureRequestInput = {
    comment: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    commentReplys?: CommentReplyCreateNestedManyWithoutComment_relationInput
  }

  export type CommentUncheckedCreateWithoutFeatureRequestInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutComment_relationInput
  }

  export type CommentCreateOrConnectWithoutFeatureRequestInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutFeatureRequestInput, CommentUncheckedCreateWithoutFeatureRequestInput>
  }

  export type CommentCreateManyFeatureRequestInputEnvelope = {
    data: CommentCreateManyFeatureRequestInput | CommentCreateManyFeatureRequestInput[]
    skipDuplicates?: boolean
  }

  export type FeatureUpvoteCreateWithoutFeatureRequestInput = {
    user: UserCreateNestedOneWithoutFeatureUpvotesInput
  }

  export type FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput = {
    userId: number
  }

  export type FeatureUpvoteCreateOrConnectWithoutFeatureRequestInput = {
    where: FeatureUpvoteWhereUniqueInput
    create: XOR<FeatureUpvoteCreateWithoutFeatureRequestInput, FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput>
  }

  export type FeatureUpvoteCreateManyFeatureRequestInputEnvelope = {
    data: FeatureUpvoteCreateManyFeatureRequestInput | FeatureUpvoteCreateManyFeatureRequestInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutFeatureRequestInput = {
    type: string
    owner: UserCreateNestedOneWithoutOwnerNotificationsInput
    user: UserCreateNestedOneWithoutUserNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutFeatureRequestInput = {
    id?: number
    ownerId: number
    userId: number
    type: string
  }

  export type NotificationCreateOrConnectWithoutFeatureRequestInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutFeatureRequestInput, NotificationUncheckedCreateWithoutFeatureRequestInput>
  }

  export type NotificationCreateManyFeatureRequestInputEnvelope = {
    data: NotificationCreateManyFeatureRequestInput | NotificationCreateManyFeatureRequestInput[]
    skipDuplicates?: boolean
  }

  export type FeatureRequestMergeCreateWithoutMergedFromInput = {
    mergedInto: FeatureRequestCreateNestedOneWithoutFeatureRequestMergeIntoInput
  }

  export type FeatureRequestMergeUncheckedCreateWithoutMergedFromInput = {
    id?: number
    mergedIntoId: number
  }

  export type FeatureRequestMergeCreateOrConnectWithoutMergedFromInput = {
    where: FeatureRequestMergeWhereUniqueInput
    create: XOR<FeatureRequestMergeCreateWithoutMergedFromInput, FeatureRequestMergeUncheckedCreateWithoutMergedFromInput>
  }

  export type FeatureRequestMergeCreateManyMergedFromInputEnvelope = {
    data: FeatureRequestMergeCreateManyMergedFromInput | FeatureRequestMergeCreateManyMergedFromInput[]
    skipDuplicates?: boolean
  }

  export type FeatureRequestMergeCreateWithoutMergedIntoInput = {
    mergedFrom: FeatureRequestCreateNestedOneWithoutFeatureRequestMergeFromInput
  }

  export type FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput = {
    id?: number
    mergedFromId: number
  }

  export type FeatureRequestMergeCreateOrConnectWithoutMergedIntoInput = {
    where: FeatureRequestMergeWhereUniqueInput
    create: XOR<FeatureRequestMergeCreateWithoutMergedIntoInput, FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput>
  }

  export type FeatureRequestMergeCreateManyMergedIntoInputEnvelope = {
    data: FeatureRequestMergeCreateManyMergedIntoInput | FeatureRequestMergeCreateManyMergedIntoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFeatureRequestsInput = {
    update: XOR<UserUpdateWithoutFeatureRequestsInput, UserUncheckedUpdateWithoutFeatureRequestsInput>
    create: XOR<UserCreateWithoutFeatureRequestsInput, UserUncheckedCreateWithoutFeatureRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeatureRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeatureRequestsInput, UserUncheckedUpdateWithoutFeatureRequestsInput>
  }

  export type UserUpdateWithoutFeatureRequestsInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeatureRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUncheckedUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryUpsertWithoutFeatureRequestsInput = {
    update: XOR<CategoryUpdateWithoutFeatureRequestsInput, CategoryUncheckedUpdateWithoutFeatureRequestsInput>
    create: XOR<CategoryCreateWithoutFeatureRequestsInput, CategoryUncheckedCreateWithoutFeatureRequestsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutFeatureRequestsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutFeatureRequestsInput, CategoryUncheckedUpdateWithoutFeatureRequestsInput>
  }

  export type CategoryUpdateWithoutFeatureRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutFeatureRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUpsertWithoutFeatureRequestsInput = {
    update: XOR<StatusUpdateWithoutFeatureRequestsInput, StatusUncheckedUpdateWithoutFeatureRequestsInput>
    create: XOR<StatusCreateWithoutFeatureRequestsInput, StatusUncheckedCreateWithoutFeatureRequestsInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutFeatureRequestsInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutFeatureRequestsInput, StatusUncheckedUpdateWithoutFeatureRequestsInput>
  }

  export type StatusUpdateWithoutFeatureRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateWithoutFeatureRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpsertWithWhereUniqueWithoutFeatureRequestInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutFeatureRequestInput, CommentUncheckedUpdateWithoutFeatureRequestInput>
    create: XOR<CommentCreateWithoutFeatureRequestInput, CommentUncheckedCreateWithoutFeatureRequestInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutFeatureRequestInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutFeatureRequestInput, CommentUncheckedUpdateWithoutFeatureRequestInput>
  }

  export type CommentUpdateManyWithWhereWithoutFeatureRequestInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutFeatureRequestInput>
  }

  export type FeatureUpvoteUpsertWithWhereUniqueWithoutFeatureRequestInput = {
    where: FeatureUpvoteWhereUniqueInput
    update: XOR<FeatureUpvoteUpdateWithoutFeatureRequestInput, FeatureUpvoteUncheckedUpdateWithoutFeatureRequestInput>
    create: XOR<FeatureUpvoteCreateWithoutFeatureRequestInput, FeatureUpvoteUncheckedCreateWithoutFeatureRequestInput>
  }

  export type FeatureUpvoteUpdateWithWhereUniqueWithoutFeatureRequestInput = {
    where: FeatureUpvoteWhereUniqueInput
    data: XOR<FeatureUpvoteUpdateWithoutFeatureRequestInput, FeatureUpvoteUncheckedUpdateWithoutFeatureRequestInput>
  }

  export type FeatureUpvoteUpdateManyWithWhereWithoutFeatureRequestInput = {
    where: FeatureUpvoteScalarWhereInput
    data: XOR<FeatureUpvoteUpdateManyMutationInput, FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutFeatureRequestInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutFeatureRequestInput, NotificationUncheckedUpdateWithoutFeatureRequestInput>
    create: XOR<NotificationCreateWithoutFeatureRequestInput, NotificationUncheckedCreateWithoutFeatureRequestInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutFeatureRequestInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutFeatureRequestInput, NotificationUncheckedUpdateWithoutFeatureRequestInput>
  }

  export type NotificationUpdateManyWithWhereWithoutFeatureRequestInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutFeatureRequestInput>
  }

  export type FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedFromInput = {
    where: FeatureRequestMergeWhereUniqueInput
    update: XOR<FeatureRequestMergeUpdateWithoutMergedFromInput, FeatureRequestMergeUncheckedUpdateWithoutMergedFromInput>
    create: XOR<FeatureRequestMergeCreateWithoutMergedFromInput, FeatureRequestMergeUncheckedCreateWithoutMergedFromInput>
  }

  export type FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedFromInput = {
    where: FeatureRequestMergeWhereUniqueInput
    data: XOR<FeatureRequestMergeUpdateWithoutMergedFromInput, FeatureRequestMergeUncheckedUpdateWithoutMergedFromInput>
  }

  export type FeatureRequestMergeUpdateManyWithWhereWithoutMergedFromInput = {
    where: FeatureRequestMergeScalarWhereInput
    data: XOR<FeatureRequestMergeUpdateManyMutationInput, FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromInput>
  }

  export type FeatureRequestMergeScalarWhereInput = {
    AND?: FeatureRequestMergeScalarWhereInput | FeatureRequestMergeScalarWhereInput[]
    OR?: FeatureRequestMergeScalarWhereInput[]
    NOT?: FeatureRequestMergeScalarWhereInput | FeatureRequestMergeScalarWhereInput[]
    id?: IntFilter<"FeatureRequestMerge"> | number
    mergedIntoId?: IntFilter<"FeatureRequestMerge"> | number
    mergedFromId?: IntFilter<"FeatureRequestMerge"> | number
  }

  export type FeatureRequestMergeUpsertWithWhereUniqueWithoutMergedIntoInput = {
    where: FeatureRequestMergeWhereUniqueInput
    update: XOR<FeatureRequestMergeUpdateWithoutMergedIntoInput, FeatureRequestMergeUncheckedUpdateWithoutMergedIntoInput>
    create: XOR<FeatureRequestMergeCreateWithoutMergedIntoInput, FeatureRequestMergeUncheckedCreateWithoutMergedIntoInput>
  }

  export type FeatureRequestMergeUpdateWithWhereUniqueWithoutMergedIntoInput = {
    where: FeatureRequestMergeWhereUniqueInput
    data: XOR<FeatureRequestMergeUpdateWithoutMergedIntoInput, FeatureRequestMergeUncheckedUpdateWithoutMergedIntoInput>
  }

  export type FeatureRequestMergeUpdateManyWithWhereWithoutMergedIntoInput = {
    where: FeatureRequestMergeScalarWhereInput
    data: XOR<FeatureRequestMergeUpdateManyMutationInput, FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoInput>
  }

  export type UserCreateWithoutCommentsInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationUncheckedCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type FeatureRequestCreateWithoutCommentsInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutCommentsInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutCommentsInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutCommentsInput, FeatureRequestUncheckedCreateWithoutCommentsInput>
  }

  export type CommentReplyCreateWithoutComment_relationInput = {
    comment: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutCommentReplysInput
  }

  export type CommentReplyUncheckedCreateWithoutComment_relationInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
  }

  export type CommentReplyCreateOrConnectWithoutComment_relationInput = {
    where: CommentReplyWhereUniqueInput
    create: XOR<CommentReplyCreateWithoutComment_relationInput, CommentReplyUncheckedCreateWithoutComment_relationInput>
  }

  export type CommentReplyCreateManyComment_relationInputEnvelope = {
    data: CommentReplyCreateManyComment_relationInput | CommentReplyCreateManyComment_relationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUncheckedUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeatureRequestUpsertWithoutCommentsInput = {
    update: XOR<FeatureRequestUpdateWithoutCommentsInput, FeatureRequestUncheckedUpdateWithoutCommentsInput>
    create: XOR<FeatureRequestCreateWithoutCommentsInput, FeatureRequestUncheckedCreateWithoutCommentsInput>
    where?: FeatureRequestWhereInput
  }

  export type FeatureRequestUpdateToOneWithWhereWithoutCommentsInput = {
    where?: FeatureRequestWhereInput
    data: XOR<FeatureRequestUpdateWithoutCommentsInput, FeatureRequestUncheckedUpdateWithoutCommentsInput>
  }

  export type FeatureRequestUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type CommentReplyUpsertWithWhereUniqueWithoutComment_relationInput = {
    where: CommentReplyWhereUniqueInput
    update: XOR<CommentReplyUpdateWithoutComment_relationInput, CommentReplyUncheckedUpdateWithoutComment_relationInput>
    create: XOR<CommentReplyCreateWithoutComment_relationInput, CommentReplyUncheckedCreateWithoutComment_relationInput>
  }

  export type CommentReplyUpdateWithWhereUniqueWithoutComment_relationInput = {
    where: CommentReplyWhereUniqueInput
    data: XOR<CommentReplyUpdateWithoutComment_relationInput, CommentReplyUncheckedUpdateWithoutComment_relationInput>
  }

  export type CommentReplyUpdateManyWithWhereWithoutComment_relationInput = {
    where: CommentReplyScalarWhereInput
    data: XOR<CommentReplyUpdateManyMutationInput, CommentReplyUncheckedUpdateManyWithoutComment_relationInput>
  }

  export type UserCreateWithoutCommentReplysInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentReplysInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationUncheckedCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentReplysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentReplysInput, UserUncheckedCreateWithoutCommentReplysInput>
  }

  export type CommentCreateWithoutCommentReplysInput = {
    comment: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    featureRequest: FeatureRequestCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutCommentReplysInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
    featureRequestId: number
  }

  export type CommentCreateOrConnectWithoutCommentReplysInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCommentReplysInput, CommentUncheckedCreateWithoutCommentReplysInput>
  }

  export type UserUpsertWithoutCommentReplysInput = {
    update: XOR<UserUpdateWithoutCommentReplysInput, UserUncheckedUpdateWithoutCommentReplysInput>
    create: XOR<UserCreateWithoutCommentReplysInput, UserUncheckedCreateWithoutCommentReplysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentReplysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentReplysInput, UserUncheckedUpdateWithoutCommentReplysInput>
  }

  export type UserUpdateWithoutCommentReplysInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentReplysInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUncheckedUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithoutCommentReplysInput = {
    update: XOR<CommentUpdateWithoutCommentReplysInput, CommentUncheckedUpdateWithoutCommentReplysInput>
    create: XOR<CommentCreateWithoutCommentReplysInput, CommentUncheckedCreateWithoutCommentReplysInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutCommentReplysInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutCommentReplysInput, CommentUncheckedUpdateWithoutCommentReplysInput>
  }

  export type CommentUpdateWithoutCommentReplysInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutCommentReplysInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutFeatureUpvotesInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeatureUpvotesInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationUncheckedCreateNestedManyWithoutOwnerInput
    userNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeatureUpvotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeatureUpvotesInput, UserUncheckedCreateWithoutFeatureUpvotesInput>
  }

  export type FeatureRequestCreateWithoutFeatureUpvotesInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutFeatureUpvotesInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutFeatureUpvotesInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutFeatureUpvotesInput, FeatureRequestUncheckedCreateWithoutFeatureUpvotesInput>
  }

  export type UserUpsertWithoutFeatureUpvotesInput = {
    update: XOR<UserUpdateWithoutFeatureUpvotesInput, UserUncheckedUpdateWithoutFeatureUpvotesInput>
    create: XOR<UserCreateWithoutFeatureUpvotesInput, UserUncheckedCreateWithoutFeatureUpvotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeatureUpvotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeatureUpvotesInput, UserUncheckedUpdateWithoutFeatureUpvotesInput>
  }

  export type UserUpdateWithoutFeatureUpvotesInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeatureUpvotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUncheckedUpdateManyWithoutOwnerNestedInput
    userNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeatureRequestUpsertWithoutFeatureUpvotesInput = {
    update: XOR<FeatureRequestUpdateWithoutFeatureUpvotesInput, FeatureRequestUncheckedUpdateWithoutFeatureUpvotesInput>
    create: XOR<FeatureRequestCreateWithoutFeatureUpvotesInput, FeatureRequestUncheckedCreateWithoutFeatureUpvotesInput>
    where?: FeatureRequestWhereInput
  }

  export type FeatureRequestUpdateToOneWithWhereWithoutFeatureUpvotesInput = {
    where?: FeatureRequestWhereInput
    data: XOR<FeatureRequestUpdateWithoutFeatureUpvotesInput, FeatureRequestUncheckedUpdateWithoutFeatureUpvotesInput>
  }

  export type FeatureRequestUpdateWithoutFeatureUpvotesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutFeatureUpvotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type UserCreateWithoutOwnerNotificationsInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutUserInput
    userNotifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnerNotificationsInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnerNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnerNotificationsInput, UserUncheckedCreateWithoutOwnerNotificationsInput>
  }

  export type UserCreateWithoutUserNotificationsInput = {
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutUserNotificationsInput = {
    id?: number
    avatarURL?: string | null
    email: string
    name: string
    role?: $Enums.Role
    featureRequests?: FeatureRequestUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentReplys?: CommentReplyUncheckedCreateNestedManyWithoutUserInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutUserInput
    ownerNotifications?: NotificationUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutUserNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
  }

  export type FeatureRequestCreateWithoutNotificationInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutNotificationInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutNotificationInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutNotificationInput, FeatureRequestUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpsertWithoutOwnerNotificationsInput = {
    update: XOR<UserUpdateWithoutOwnerNotificationsInput, UserUncheckedUpdateWithoutOwnerNotificationsInput>
    create: XOR<UserCreateWithoutOwnerNotificationsInput, UserUncheckedCreateWithoutOwnerNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnerNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnerNotificationsInput, UserUncheckedUpdateWithoutOwnerNotificationsInput>
  }

  export type UserUpdateWithoutOwnerNotificationsInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutUserNestedInput
    userNotifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnerNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUserNotificationsInput = {
    update: XOR<UserUpdateWithoutUserNotificationsInput, UserUncheckedUpdateWithoutUserNotificationsInput>
    create: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserNotificationsInput, UserUncheckedUpdateWithoutUserNotificationsInput>
  }

  export type UserUpdateWithoutUserNotificationsInput = {
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutUserNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarURL?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    featureRequests?: FeatureRequestUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutUserNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutUserNestedInput
    ownerNotifications?: NotificationUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type FeatureRequestUpsertWithoutNotificationInput = {
    update: XOR<FeatureRequestUpdateWithoutNotificationInput, FeatureRequestUncheckedUpdateWithoutNotificationInput>
    create: XOR<FeatureRequestCreateWithoutNotificationInput, FeatureRequestUncheckedCreateWithoutNotificationInput>
    where?: FeatureRequestWhereInput
  }

  export type FeatureRequestUpdateToOneWithWhereWithoutNotificationInput = {
    where?: FeatureRequestWhereInput
    data: XOR<FeatureRequestUpdateWithoutNotificationInput, FeatureRequestUncheckedUpdateWithoutNotificationInput>
  }

  export type FeatureRequestUpdateWithoutNotificationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestCreateWithoutFeatureRequestMergeIntoInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeCreateNestedManyWithoutMergedFromInput
  }

  export type FeatureRequestUncheckedCreateWithoutFeatureRequestMergeIntoInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedFromInput
  }

  export type FeatureRequestCreateOrConnectWithoutFeatureRequestMergeIntoInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutFeatureRequestMergeIntoInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeIntoInput>
  }

  export type FeatureRequestCreateWithoutFeatureRequestMergeFromInput = {
    title: string
    description: string
    dateSubmitted?: Date | string
    user: UserCreateNestedOneWithoutFeatureRequestsInput
    category: CategoryCreateNestedOneWithoutFeatureRequestsInput
    status?: StatusCreateNestedOneWithoutFeatureRequestsInput
    comments?: CommentCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeInto?: FeatureRequestMergeCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestUncheckedCreateWithoutFeatureRequestMergeFromInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
    statusId?: number
    comments?: CommentUncheckedCreateNestedManyWithoutFeatureRequestInput
    featureUpvotes?: FeatureUpvoteUncheckedCreateNestedManyWithoutFeatureRequestInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutFeatureRequestInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedCreateNestedManyWithoutMergedIntoInput
  }

  export type FeatureRequestCreateOrConnectWithoutFeatureRequestMergeFromInput = {
    where: FeatureRequestWhereUniqueInput
    create: XOR<FeatureRequestCreateWithoutFeatureRequestMergeFromInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeFromInput>
  }

  export type FeatureRequestUpsertWithoutFeatureRequestMergeIntoInput = {
    update: XOR<FeatureRequestUpdateWithoutFeatureRequestMergeIntoInput, FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeIntoInput>
    create: XOR<FeatureRequestCreateWithoutFeatureRequestMergeIntoInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeIntoInput>
    where?: FeatureRequestWhereInput
  }

  export type FeatureRequestUpdateToOneWithWhereWithoutFeatureRequestMergeIntoInput = {
    where?: FeatureRequestWhereInput
    data: XOR<FeatureRequestUpdateWithoutFeatureRequestMergeIntoInput, FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeIntoInput>
  }

  export type FeatureRequestUpdateWithoutFeatureRequestMergeIntoInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeIntoInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
  }

  export type FeatureRequestUpsertWithoutFeatureRequestMergeFromInput = {
    update: XOR<FeatureRequestUpdateWithoutFeatureRequestMergeFromInput, FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeFromInput>
    create: XOR<FeatureRequestCreateWithoutFeatureRequestMergeFromInput, FeatureRequestUncheckedCreateWithoutFeatureRequestMergeFromInput>
    where?: FeatureRequestWhereInput
  }

  export type FeatureRequestUpdateToOneWithWhereWithoutFeatureRequestMergeFromInput = {
    where?: FeatureRequestWhereInput
    data: XOR<FeatureRequestUpdateWithoutFeatureRequestMergeFromInput, FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeFromInput>
  }

  export type FeatureRequestUpdateWithoutFeatureRequestMergeFromInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutFeatureRequestMergeFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestCreateManyUserInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    categoryId: number
    statusId?: number
  }

  export type CommentCreateManyUserInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    featureRequestId: number
  }

  export type CommentReplyCreateManyUserInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    commentId: number
  }

  export type FeatureUpvoteCreateManyUserInput = {
    featureRequestId: number
  }

  export type NotificationCreateManyOwnerInput = {
    id?: number
    userId: number
    featureRequestId: number
    type: string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    ownerId: number
    featureRequestId: number
    type: string
  }

  export type FeatureRequestUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutCommentsNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutComment_relationNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    featureRequestId?: IntFieldUpdateOperationsInput | number
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutComment_relationNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentReplyUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    comment_relation?: CommentUpdateOneRequiredWithoutCommentReplysNestedInput
  }

  export type CommentReplyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentReplyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureUpvoteUpdateWithoutUserInput = {
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutFeatureUpvotesNestedInput
  }

  export type FeatureUpvoteUncheckedUpdateWithoutUserInput = {
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureUpvoteUncheckedUpdateManyWithoutUserInput = {
    featureRequestId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUpdateWithoutOwnerInput = {
    type?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserNotificationsNestedInput
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutOwnerNotificationsNestedInput
    featureRequest?: FeatureRequestUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    featureRequestId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type FeatureRequestCreateManyCategoryInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    statusId?: number
  }

  export type FeatureRequestUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    status?: StatusUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureRequestCreateManyStatusInput = {
    id?: number
    title: string
    description: string
    dateSubmitted?: Date | string
    userId: number
    categoryId: number
  }

  export type FeatureRequestUpdateWithoutStatusInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureRequestsNestedInput
    category?: CategoryUpdateOneRequiredWithoutFeatureRequestsNestedInput
    comments?: CommentUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutFeatureRequestNestedInput
    featureUpvotes?: FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutFeatureRequestNestedInput
    FeatureRequestMergeFrom?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromNestedInput
    FeatureRequestMergeInto?: FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoNestedInput
  }

  export type FeatureRequestUncheckedUpdateManyWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyFeatureRequestInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
  }

  export type FeatureUpvoteCreateManyFeatureRequestInput = {
    userId: number
  }

  export type NotificationCreateManyFeatureRequestInput = {
    id?: number
    ownerId: number
    userId: number
    type: string
  }

  export type FeatureRequestMergeCreateManyMergedFromInput = {
    id?: number
    mergedIntoId: number
  }

  export type FeatureRequestMergeCreateManyMergedIntoInput = {
    id?: number
    mergedFromId: number
  }

  export type CommentUpdateWithoutFeatureRequestInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    commentReplys?: CommentReplyUpdateManyWithoutComment_relationNestedInput
  }

  export type CommentUncheckedUpdateWithoutFeatureRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    commentReplys?: CommentReplyUncheckedUpdateManyWithoutComment_relationNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutFeatureRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureUpvoteUpdateWithoutFeatureRequestInput = {
    user?: UserUpdateOneRequiredWithoutFeatureUpvotesNestedInput
  }

  export type FeatureUpvoteUncheckedUpdateWithoutFeatureRequestInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureUpvoteUncheckedUpdateManyWithoutFeatureRequestInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUpdateWithoutFeatureRequestInput = {
    type?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutOwnerNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutUserNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutFeatureRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutFeatureRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type FeatureRequestMergeUpdateWithoutMergedFromInput = {
    mergedInto?: FeatureRequestUpdateOneRequiredWithoutFeatureRequestMergeIntoNestedInput
  }

  export type FeatureRequestMergeUncheckedUpdateWithoutMergedFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    mergedIntoId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureRequestMergeUncheckedUpdateManyWithoutMergedFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    mergedIntoId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureRequestMergeUpdateWithoutMergedIntoInput = {
    mergedFrom?: FeatureRequestUpdateOneRequiredWithoutFeatureRequestMergeFromNestedInput
  }

  export type FeatureRequestMergeUncheckedUpdateWithoutMergedIntoInput = {
    id?: IntFieldUpdateOperationsInput | number
    mergedFromId?: IntFieldUpdateOperationsInput | number
  }

  export type FeatureRequestMergeUncheckedUpdateManyWithoutMergedIntoInput = {
    id?: IntFieldUpdateOperationsInput | number
    mergedFromId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentReplyCreateManyComment_relationInput = {
    id?: number
    comment: string
    dateSubmitted?: Date | string
    userId: number
  }

  export type CommentReplyUpdateWithoutComment_relationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentReplysNestedInput
  }

  export type CommentReplyUncheckedUpdateWithoutComment_relationInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentReplyUncheckedUpdateManyWithoutComment_relationInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusCountOutputTypeDefaultArgs instead
     */
    export type StatusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeatureRequestCountOutputTypeDefaultArgs instead
     */
    export type FeatureRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeatureRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusDefaultArgs instead
     */
    export type StatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeatureRequestDefaultArgs instead
     */
    export type FeatureRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeatureRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentReplyDefaultArgs instead
     */
    export type CommentReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentReplyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeatureUpvoteDefaultArgs instead
     */
    export type FeatureUpvoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeatureUpvoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeatureRequestMergeDefaultArgs instead
     */
    export type FeatureRequestMergeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeatureRequestMergeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}