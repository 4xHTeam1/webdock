// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(uuid())
  avatarUrl       String?
  email           String
  name            String
  featureRequests FeatureRequest[]
  comments        Comment[]
  commentReplys   CommentReply[]
  featureUpvotes  FeatureUpvote[]
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String
  featureRequests FeatureRequest[]
}

model Status {
  id              Int              @id @default(autoincrement())
  name            String
  featureRequests FeatureRequest[]
}

model FeatureRequest {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  dateSubmitted DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    Int
  status        Status    @relation(fields: [statusId], references: [id])
  statusId      Int
  comments      Comment[]
  featureUpvotes FeatureUpvote[]
}

model Comment {
  id               Int            @id @default(autoincrement())
  comment          String
  dateSubmitted    DateTime       @default(now())
  user             User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           String
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id])
  featureRequestId Int
  commentReplys    CommentReply[]
}

model CommentReply {
  id               Int      @id @default(autoincrement())
  comment          String
  dateSubmitted    DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           String
  comment_relation Comment  @relation(fields: [commentId], references: [id])
  commentId        Int
}

model FeatureUpvote{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String
  featureRequest FeatureRequest @relation(fields: [featureRequestId], references: [id])
  featureRequestId Int
}
