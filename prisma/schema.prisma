// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  avatarURL       String?
  email           String
  name            String
  featureRequests FeatureRequest[]
  comments        Comment[]
  commentReplys   CommentReply[]
  featureUpvotes  FeatureUpvote[]
  role            Role             @default(USER)
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String
  featureRequests FeatureRequest[]
}

model Status {
  id              Int              @id @default(autoincrement())
  name            String
  featureRequests FeatureRequest[]
}

model FeatureRequest {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(255)
  description    String          @db.VarChar(500)
  dateSubmitted  DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     Int
  status         Status          @relation(fields: [statusId], references: [id])
  statusId       Int             @default(1)
  comments       Comment[]
  featureUpvotes FeatureUpvote[]
}

model Comment {
  id               Int            @id @default(autoincrement())
  comment          String         @db.VarChar(500)
  dateSubmitted    DateTime       @default(now())
  user             User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           Int
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  featureRequestId Int
  commentReplys    CommentReply[]
}

model CommentReply {
  id               Int      @id @default(autoincrement())
  comment          String   @db.VarChar(500)
  dateSubmitted    DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           Int
  comment_relation Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId        Int
}

model FeatureUpvote {
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  featureRequestId Int

  @@id([userId, featureRequestId])
}

enum Role {
  USER
  ADMIN
}
